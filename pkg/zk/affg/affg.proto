syntax = "proto3";

package zkaffg;

option go_package = "github.com/taurusgroup/cmp-ecdsa/pkg/zk/affg;zkaffg";

option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "pkg/paillier/ciphertext.proto";

message Commitment {
  // A = (alpha ⊙ c ) ⊕ Enc(N0, beta, r)
  paillier.Ciphertext A = 1;

  // Bₓ = gᵃ
  bytes Bx = 2 [(gogoproto.customtype) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point", (gogoproto.nullable) = false];

  // By = Enc(N1, beta, ry)
  paillier.Ciphertext By = 3;

  // E = sᵃ tᵍ
  bytes E = 4 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
  // S = sˣ tᵐ
  bytes S = 5 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];

  // F = sᵇ tᵈ
  bytes F = 6 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
  // T = sʸ tᵘ
  bytes T = 7 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
}

message Proof {
  Commitment C = 1 [(gogoproto.embed) = true];
  bytes Z1 = 2 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
  bytes Z2 = 3 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
  bytes Z3 = 4 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
  bytes Z4 = 5 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
  bytes W = 6 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
  bytes Wy = 7 [(gogoproto.casttypewith) = "math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster"];
}
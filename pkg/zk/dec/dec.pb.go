// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/zk/dec/dec.proto

package zkdec

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_pkg_math_curve "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve"
	paillier "github.com/taurusgroup/cmp-ecdsa/pkg/paillier"
	github_com_taurusgroup_cmp_ecdsa_proto "github.com/taurusgroup/cmp-ecdsa/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Commitment struct {
	// S = sʸ tᵘ
	S *math_big.Int `protobuf:"bytes,1,opt,name=S,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"S,omitempty"`
	// T = sᵃ tᵛ
	T *math_big.Int `protobuf:"bytes,2,opt,name=T,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"T,omitempty"`
	// A = Enc₀(α; r)
	A *paillier.Ciphertext `protobuf:"bytes,4,opt,name=A,proto3" json:"A,omitempty"`
	// Gamma = alpha (mod q)
	Gamma *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Scalar `protobuf:"bytes,5,opt,name=Gamma,proto3,customtype=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Scalar" json:"Gamma,omitempty"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e77b7d5736c576b8, []int{0}
}
func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(m, src)
}
func (m *Commitment) XXX_Size() int {
	return m.Size()
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

type Proof struct {
	*Commitment `protobuf:"bytes,1,opt,name=C,proto3,embedded=C" json:"C,omitempty"`
	// Z1 = α + e•y
	Z1 *math_big.Int `protobuf:"bytes,2,opt,name=Z1,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"Z1,omitempty"`
	// Z2 = ν + e•μ
	Z2 *math_big.Int `protobuf:"bytes,3,opt,name=Z2,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"Z2,omitempty"`
	// W  = r ρ ᵉ (mod N₀)
	W *math_big.Int `protobuf:"bytes,4,opt,name=W,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"W,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_e77b7d5736c576b8, []int{1}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Commitment)(nil), "zkdec.Commitment")
	proto.RegisterType((*Proof)(nil), "zkdec.Proof")
}

func init() { proto.RegisterFile("pkg/zk/dec/dec.proto", fileDescriptor_e77b7d5736c576b8) }

var fileDescriptor_e77b7d5736c576b8 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0xae, 0xda, 0x30,
	0x14, 0x86, 0xe3, 0x94, 0x74, 0x30, 0x5d, 0x1a, 0x31, 0x44, 0x48, 0x35, 0x08, 0xa9, 0x12, 0x0b,
	0xb6, 0x48, 0xa5, 0x0e, 0x45, 0x1d, 0x20, 0x43, 0xd5, 0xa9, 0x34, 0x41, 0x42, 0x62, 0x73, 0x8c,
	0x09, 0x51, 0x30, 0x8e, 0x8c, 0x53, 0x55, 0x3c, 0x45, 0x1f, 0xa2, 0x5d, 0xfa, 0x24, 0x8c, 0x8c,
	0xa8, 0x03, 0x6d, 0xc3, 0x8b, 0x54, 0x71, 0xd4, 0x7b, 0xef, 0x76, 0xef, 0x90, 0x21, 0x52, 0x8e,
	0x8e, 0xfd, 0xfd, 0xe7, 0xfc, 0xbf, 0x61, 0x27, 0xcf, 0x12, 0x72, 0xcc, 0xc8, 0x9a, 0xb3, 0xea,
	0xc3, 0xb9, 0x92, 0x5a, 0xba, 0xce, 0x31, 0x5b, 0x73, 0xd6, 0x1d, 0x25, 0xa9, 0xde, 0x16, 0x31,
	0x66, 0x52, 0x90, 0x44, 0x26, 0x92, 0x98, 0x6e, 0x5c, 0x6c, 0x4c, 0x65, 0x0a, 0xf3, 0x57, 0xdf,
	0xea, 0xbe, 0xaa, 0x58, 0x39, 0x4d, 0x77, 0xbb, 0x94, 0x2b, 0xc2, 0xd2, 0x7c, 0xcb, 0x95, 0xe6,
	0x5f, 0x75, 0xdd, 0x1e, 0x7c, 0xb7, 0x21, 0x0c, 0xa4, 0x10, 0xa9, 0x16, 0x7c, 0xaf, 0xdd, 0x4f,
	0x10, 0x44, 0x1e, 0xe8, 0x83, 0xe1, 0x8b, 0xd9, 0xf4, 0xe7, 0xef, 0xde, 0x7b, 0x41, 0xf5, 0x96,
	0xc4, 0x69, 0x82, 0x3f, 0xee, 0xf5, 0xe4, 0x81, 0xb0, 0xa6, 0x85, 0x2a, 0x0e, 0x89, 0x92, 0x45,
	0x4e, 0x98, 0xc8, 0x47, 0x9c, 0xad, 0x0f, 0xb4, 0x9e, 0xa4, 0x3a, 0x1a, 0xd0, 0x83, 0xe6, 0x2a,
	0x04, 0x51, 0x05, 0x5c, 0x78, 0x76, 0x63, 0xc0, 0x85, 0x3b, 0x80, 0x60, 0xea, 0xb5, 0xfa, 0x60,
	0xd8, 0xf6, 0x3b, 0xf8, 0xff, 0x5e, 0x38, 0xb8, 0xdb, 0x2b, 0x04, 0x53, 0x77, 0x0e, 0x9d, 0x0f,
	0x54, 0x08, 0xea, 0x39, 0x46, 0xf8, 0xdd, 0xaf, 0x6b, 0xef, 0xed, 0xe3, 0x5a, 0x59, 0x42, 0xcc,
	0x74, 0xac, 0x50, 0x5f, 0x38, 0x8e, 0x18, 0xdd, 0x51, 0x15, 0xd6, 0xa0, 0xc1, 0x0f, 0x1b, 0x3a,
	0x73, 0x25, 0xe5, 0xc6, 0x7d, 0x0d, 0x41, 0x60, 0x1c, 0x6a, 0xfb, 0x2f, 0xb1, 0x49, 0x04, 0xdf,
	0xfb, 0x37, 0x6b, 0x9d, 0xaf, 0x3d, 0x10, 0x82, 0xc0, 0xfd, 0x0c, 0xed, 0xd5, 0xb8, 0xb9, 0xc5,
	0xed, 0xd5, 0xd8, 0x20, 0x7d, 0xef, 0x59, 0x73, 0x48, 0xbf, 0x4a, 0x67, 0x69, 0xcc, 0x6c, 0x26,
	0x9d, 0xe5, 0x2c, 0x3a, 0xfd, 0x45, 0xd6, 0xa9, 0x44, 0xe0, 0x5c, 0x22, 0x70, 0x29, 0x11, 0xf8,
	0x53, 0x22, 0xf0, 0xed, 0x86, 0xac, 0xf3, 0x0d, 0x59, 0x97, 0x1b, 0xb2, 0x56, 0xe3, 0x27, 0x05,
	0x51, 0x3f, 0xfe, 0x89, 0xf1, 0x37, 0x7e, 0x6e, 0x84, 0xde, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0xe5, 0xbb, 0x0a, 0xf9, 0x17, 0x03, 0x00, 0x00,
}

func (m *Commitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gamma != nil {
		{
			size := m.Gamma.Size()
			i -= size
			if _, err := m.Gamma.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintDec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.A != nil {
		{
			size, err := m.A.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.T)
		i -= size
		if _, err := __caster.MarshalTo(m.T, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.W)
		i -= size
		if _, err := __caster.MarshalTo(m.W, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.Z2)
		i -= size
		if _, err := __caster.MarshalTo(m.Z2, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.Z1)
		i -= size
		if _, err := __caster.MarshalTo(m.Z1, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Commitment != nil {
		{
			size, err := m.Commitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDec(dAtA []byte, offset int, v uint64) int {
	offset -= sovDec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Commitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovDec(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.T)
		n += 1 + l + sovDec(uint64(l))
	}
	if m.A != nil {
		l = m.A.Size()
		n += 1 + l + sovDec(uint64(l))
	}
	if m.Gamma != nil {
		l = m.Gamma.Size()
		n += 1 + l + sovDec(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commitment != nil {
		l = m.Commitment.Size()
		n += 1 + l + sovDec(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.Z1)
		n += 1 + l + sovDec(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.Z2)
		n += 1 + l + sovDec(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.W)
		n += 1 + l + sovDec(uint64(l))
	}
	return n
}

func sovDec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDec(x uint64) (n int) {
	return sovDec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Commitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.T = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A == nil {
				m.A = &paillier.Ciphertext{}
			}
			if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gamma", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Scalar
			m.Gamma = &v
			if err := m.Gamma.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitment == nil {
				m.Commitment = &Commitment{}
			}
			if err := m.Commitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z1 = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z2 = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.W = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDec = fmt.Errorf("proto: unexpected end of group")
)

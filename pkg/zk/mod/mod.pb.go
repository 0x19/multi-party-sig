// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/zk/mod/mod.proto

package zkmod

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_proto "github.com/taurusgroup/cmp-ecdsa/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Proof struct {
	W *math_big.Int                                    `protobuf:"bytes,1,opt,name=w,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"w,omitempty"`
	X *github_com_taurusgroup_cmp_ecdsa_proto.IntSlice `protobuf:"bytes,2,opt,name=x,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/proto.IntSlice;github.com/taurusgroup/cmp-ecdsa/proto.IntSliceCaster" json:"x,omitempty"`
	A []bool                                           `protobuf:"varint,3,rep,packed,name=a,proto3" json:"a,omitempty"`
	B []bool                                           `protobuf:"varint,4,rep,packed,name=b,proto3" json:"b,omitempty"`
	Z *github_com_taurusgroup_cmp_ecdsa_proto.IntSlice `protobuf:"bytes,5,opt,name=z,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/proto.IntSlice;github.com/taurusgroup/cmp-ecdsa/proto.IntSliceCaster" json:"z,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3198f32ffb0533, []int{0}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Proof)(nil), "zkmod.Proof")
}

func init() { proto.RegisterFile("pkg/zk/mod/mod.proto", fileDescriptor_3c3198f32ffb0533) }

var fileDescriptor_3c3198f32ffb0533 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0xc8, 0x4e, 0xd7,
	0xaf, 0xca, 0xd6, 0xcf, 0xcd, 0x4f, 0x01, 0x61, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xd6,
	0xaa, 0xec, 0xdc, 0xfc, 0x14, 0x29, 0xdd, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc,
	0x5c, 0xfd, 0xf4, 0xfc, 0xf4, 0x7c, 0x7d, 0xb0, 0x6c, 0x52, 0x69, 0x1a, 0x98, 0x07, 0xe6, 0x80,
	0x59, 0x10, 0x5d, 0x4a, 0xcf, 0x98, 0xb8, 0x58, 0x03, 0x8a, 0xf2, 0xf3, 0xd3, 0x84, 0xfc, 0xb9,
	0x18, 0xcb, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x9c, 0x1c, 0x57, 0xdd, 0x97, 0xb7, 0xcd, 0x4d,
	0x2c, 0xc9, 0xd0, 0x4f, 0xca, 0x4c, 0xd7, 0xf3, 0xcc, 0x2b, 0xb1, 0x46, 0x32, 0xb4, 0x24, 0xb1,
	0xb4, 0xa8, 0xb4, 0x38, 0xbd, 0x28, 0xbf, 0xb4, 0x40, 0x3f, 0x39, 0xb7, 0x40, 0x37, 0x35, 0x39,
	0xa5, 0x38, 0x11, 0x62, 0x0b, 0x48, 0xa9, 0x73, 0x62, 0x71, 0x49, 0x6a, 0x51, 0x10, 0x63, 0xb9,
	0x50, 0x39, 0x17, 0x63, 0x85, 0x04, 0x13, 0xd8, 0xc0, 0xcc, 0x55, 0xf7, 0xe5, 0x53, 0x89, 0x37,
	0x23, 0x38, 0x27, 0x33, 0x39, 0xd5, 0x9a, 0x44, 0xf5, 0x30, 0x8b, 0x2b, 0x84, 0x78, 0xb8, 0x18,
	0x13, 0x25, 0x98, 0x15, 0x98, 0x35, 0x38, 0x82, 0x18, 0x13, 0x41, 0xbc, 0x24, 0x09, 0x16, 0x08,
	0x2f, 0x09, 0xe4, 0xa8, 0x2a, 0x09, 0x56, 0xba, 0x3b, 0xaa, 0xca, 0x29, 0xf8, 0xc4, 0x43, 0x39,
	0x86, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca,
	0x90, 0xb0, 0xd9, 0xf0, 0x78, 0xb7, 0x06, 0x47, 0x76, 0x12, 0x1b, 0xd8, 0x36, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x1e, 0x21, 0xb7, 0x6a, 0x12, 0x02, 0x00, 0x00,
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntSliceCaster{}
		size := __caster.Size(m.Z)
		i -= size
		if _, err := __caster.MarshalTo(m.Z, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMod(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.B) > 0 {
		for iNdEx := len(m.B) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.B[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintMod(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.A) > 0 {
		for iNdEx := len(m.A) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.A[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintMod(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0x1a
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntSliceCaster{}
		size := __caster.Size(m.X)
		i -= size
		if _, err := __caster.MarshalTo(m.X, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMod(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.W)
		i -= size
		if _, err := __caster.MarshalTo(m.W, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMod(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMod(dAtA []byte, offset int, v uint64) int {
	offset -= sovMod(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.W)
		n += 1 + l + sovMod(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntSliceCaster{}
		l = __caster.Size(m.X)
		n += 1 + l + sovMod(uint64(l))
	}
	if len(m.A) > 0 {
		n += 1 + sovMod(uint64(len(m.A))) + len(m.A)*1
	}
	if len(m.B) > 0 {
		n += 1 + sovMod(uint64(len(m.B))) + len(m.B)*1
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntSliceCaster{}
		l = __caster.Size(m.Z)
		n += 1 + l + sovMod(uint64(l))
	}
	return n
}

func sovMod(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMod(x uint64) (n int) {
	return sovMod(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMod
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.W = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMod
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntSliceCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.X = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMod
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.A = append(m.A, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMod
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMod
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMod
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.A) == 0 {
					m.A = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMod
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.A = append(m.A, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMod
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.B = append(m.B, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMod
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMod
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMod
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.B) == 0 {
					m.B = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMod
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.B = append(m.B, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMod
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntSliceCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMod(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMod
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMod
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMod
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMod
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMod        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMod          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMod = fmt.Errorf("proto: unexpected end of group")
)

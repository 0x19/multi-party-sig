// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/math/polynomial/exponent.proto

package polynomial

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_pkg_math_curve "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Exponent struct {
	// IsConstant indicates that the constant coefficient is the identity.
	// We do this so that we never need to send an encoded Identity point, and thus consider it invalid
	IsConstant bool `protobuf:"varint,1,opt,name=IsConstant,proto3" json:"IsConstant,omitempty"`
	// Coefficients is a list of curve.Point representing the coefficients of a polynomial over an elliptic curve.
	Coefficients []github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point `protobuf:"bytes,2,rep,name=Coefficients,proto3,customtype=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point" json:"Coefficients,omitempty"`
}

func (m *Exponent) Reset()         { *m = Exponent{} }
func (m *Exponent) String() string { return proto.CompactTextString(m) }
func (*Exponent) ProtoMessage()    {}
func (*Exponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9dc19b37fe1f76b, []int{0}
}
func (m *Exponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Exponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exponent.Merge(m, src)
}
func (m *Exponent) XXX_Size() int {
	return m.Size()
}
func (m *Exponent) XXX_DiscardUnknown() {
	xxx_messageInfo_Exponent.DiscardUnknown(m)
}

var xxx_messageInfo_Exponent proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Exponent)(nil), "polynomial.Exponent")
}

func init() {
	proto.RegisterFile("pkg/math/polynomial/exponent.proto", fileDescriptor_d9dc19b37fe1f76b)
}

var fileDescriptor_d9dc19b37fe1f76b = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0xc8, 0x4e, 0xd7,
	0xcf, 0x4d, 0x2c, 0xc9, 0xd0, 0x2f, 0xc8, 0xcf, 0xa9, 0xcc, 0xcb, 0xcf, 0xcd, 0x4c, 0xcc, 0xd1,
	0x4f, 0xad, 0x28, 0xc8, 0xcf, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x42, 0x48, 0x49, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7,
	0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0x95, 0x24, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1,
	0xaa, 0x34, 0x9d, 0x91, 0x8b, 0xc3, 0x15, 0x6a, 0x9a, 0x90, 0x1c, 0x17, 0x97, 0x67, 0xb1, 0x73,
	0x7e, 0x5e, 0x71, 0x49, 0x62, 0x5e, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x92, 0x88,
	0x50, 0x22, 0x17, 0x8f, 0x73, 0x7e, 0x6a, 0x5a, 0x5a, 0x66, 0x72, 0x66, 0x6a, 0x5e, 0x49, 0xb1,
	0x04, 0x93, 0x02, 0xb3, 0x06, 0x8f, 0x93, 0xed, 0x89, 0x7b, 0xf2, 0x8c, 0xb7, 0xee, 0xc9, 0x9b,
	0x22, 0xd9, 0x5c, 0x92, 0x58, 0x5a, 0x54, 0x5a, 0x9c, 0x5e, 0x94, 0x5f, 0x5a, 0xa0, 0x9f, 0x9c,
	0x5b, 0xa0, 0x9b, 0x9a, 0x9c, 0x52, 0x9c, 0xa8, 0x0f, 0xf7, 0x4a, 0x72, 0x69, 0x51, 0x59, 0xaa,
	0x5e, 0x40, 0x7e, 0x66, 0x5e, 0x49, 0x10, 0x8a, 0x91, 0x56, 0x1c, 0x1d, 0x0b, 0xe4, 0x19, 0x5e,
	0x2c, 0x90, 0x67, 0x70, 0x0a, 0x3a, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x1b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b,
	0x8f, 0xe5, 0x18, 0xa2, 0x4c, 0x88, 0xb7, 0x0c, 0x11, 0x38, 0x49, 0x6c, 0x60, 0x4f, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xde, 0x6a, 0x82, 0x6c, 0x55, 0x01, 0x00, 0x00,
}

func (m *Exponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Exponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coefficients) > 0 {
		for iNdEx := len(m.Coefficients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Coefficients[iNdEx].Size()
				i -= size
				if _, err := m.Coefficients[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintExponent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IsConstant {
		i--
		if m.IsConstant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovExponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Exponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsConstant {
		n += 2
	}
	if len(m.Coefficients) > 0 {
		for _, e := range m.Coefficients {
			l = e.Size()
			n += 1 + l + sovExponent(uint64(l))
		}
	}
	return n
}

func sovExponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExponent(x uint64) (n int) {
	return sovExponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Exponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConstant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConstant = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coefficients", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExponent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point
			m.Coefficients = append(m.Coefficients, v)
			if err := m.Coefficients[len(m.Coefficients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExponent = fmt.Errorf("proto: unexpected end of group")
)

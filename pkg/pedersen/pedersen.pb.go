// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/pedersen/pedersen.proto

package pedersen

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_proto "github.com/taurusgroup/cmp-ecdsa/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Parameters struct {
	// N = p•q, p ≡ q ≡ 3 mod 4
	N *math_big.Int `protobuf:"bytes,1,opt,name=N,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"N,omitempty"`
	// S = r² mod N
	S *math_big.Int `protobuf:"bytes,2,opt,name=S,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"S,omitempty"`
	// T = Sˡ mod N
	T *math_big.Int `protobuf:"bytes,3,opt,name=T,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/proto.IntCaster" json:"T,omitempty"`
}

func (m *Parameters) Reset()         { *m = Parameters{} }
func (m *Parameters) String() string { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()    {}
func (*Parameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3c90fc8d8139fe1, []int{0}
}
func (m *Parameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Parameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Parameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameters.Merge(m, src)
}
func (m *Parameters) XXX_Size() int {
	return m.Size()
}
func (m *Parameters) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameters.DiscardUnknown(m)
}

var xxx_messageInfo_Parameters proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Parameters)(nil), "pedersen.Parameters")
}

func init() { proto.RegisterFile("pkg/pedersen/pedersen.proto", fileDescriptor_b3c90fc8d8139fe1) }

var fileDescriptor_b3c90fc8d8139fe1 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0xc8, 0x4e, 0xd7,
	0x2f, 0x48, 0x4d, 0x49, 0x2d, 0x2a, 0x4e, 0xcd, 0x83, 0x33, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x38, 0x60, 0x7c, 0x29, 0xdd, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c,
	0xfd, 0xf4, 0xfc, 0xf4, 0x7c, 0x7d, 0xb0, 0x82, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0xcc, 0x01, 0xb3,
	0x20, 0x1a, 0x95, 0x3a, 0x99, 0xb8, 0xb8, 0x02, 0x12, 0x8b, 0x12, 0x73, 0x53, 0x4b, 0x52, 0x8b,
	0x8a, 0x85, 0xfc, 0xb9, 0x18, 0xfd, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x9c, 0x1c, 0x57, 0xdd,
	0x97, 0xb7, 0xcd, 0x4d, 0x2c, 0xc9, 0xd0, 0x4f, 0xca, 0x4c, 0xd7, 0xf3, 0xcc, 0x2b, 0xb1, 0x46,
	0x32, 0xb9, 0x24, 0xb1, 0xb4, 0xa8, 0xb4, 0x38, 0xbd, 0x28, 0xbf, 0xb4, 0x40, 0x3f, 0x39, 0xb7,
	0x40, 0x37, 0x35, 0x39, 0xa5, 0x38, 0x11, 0x62, 0x15, 0x48, 0xa9, 0x73, 0x62, 0x71, 0x49, 0x6a,
	0x51, 0x10, 0xa3, 0x1f, 0xc8, 0xc0, 0x60, 0x09, 0x26, 0xaa, 0x19, 0x18, 0x0c, 0x32, 0x30, 0x44,
	0x82, 0x99, 0x6a, 0x06, 0x86, 0x58, 0x71, 0x74, 0x2c, 0x90, 0x67, 0x98, 0xb1, 0x50, 0x9e, 0xd1,
	0xc9, 0xfd, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0,
	0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x74, 0x09, 0x1b, 0x8c,
	0x14, 0x39, 0x49, 0x6c, 0x60, 0x6b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0x0c, 0xe8,
	0xb6, 0xb3, 0x01, 0x00, 0x00,
}

func (m *Parameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Parameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.T)
		i -= size
		if _, err := __caster.MarshalTo(m.T, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPedersen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPedersen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		size := __caster.Size(m.N)
		i -= size
		if _, err := __caster.MarshalTo(m.N, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPedersen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPedersen(dAtA []byte, offset int, v uint64) int {
	offset -= sovPedersen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Parameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.N)
		n += 1 + l + sovPedersen(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovPedersen(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
		l = __caster.Size(m.T)
		n += 1 + l + sovPedersen(uint64(l))
	}
	return n
}

func sovPedersen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPedersen(x uint64) (n int) {
	return sovPedersen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Parameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPedersen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPedersen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPedersen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPedersen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.N = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPedersen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPedersen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPedersen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPedersen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPedersen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPedersen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.T = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPedersen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPedersen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPedersen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPedersen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPedersen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPedersen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPedersen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPedersen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPedersen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPedersen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPedersen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPedersen = fmt.Errorf("proto: unexpected end of group")
)

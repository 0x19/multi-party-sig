// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zk.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_pkg_math_curve "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve"
	github_com_taurusgroup_cmp_ecdsa_pkg_paillier "github.com/taurusgroup/cmp-ecdsa/pkg/paillier"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ZKMod struct {
	W *math_big.Int `protobuf:"bytes,1,opt,name=w,proto3,casttypewith=math/big.Int;IntCaster" json:"w,omitempty"`
	X *IntSlice     `protobuf:"bytes,2,opt,name=x,proto3,casttypewith=IntSlice;IntSliceCaster" json:"x,omitempty"`
	A []bool        `protobuf:"varint,3,rep,packed,name=a,proto3" json:"a,omitempty"`
	B []bool        `protobuf:"varint,4,rep,packed,name=b,proto3" json:"b,omitempty"`
	Z *IntSlice     `protobuf:"bytes,5,opt,name=z,proto3,casttypewith=IntSlice;IntSliceCaster" json:"z,omitempty"`
}

func (m *ZKMod) Reset()      { *m = ZKMod{} }
func (*ZKMod) ProtoMessage() {}
func (*ZKMod) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{0}
}
func (m *ZKMod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKMod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKMod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKMod.Merge(m, src)
}
func (m *ZKMod) XXX_Size() int {
	return m.Size()
}
func (m *ZKMod) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKMod.DiscardUnknown(m)
}

var xxx_messageInfo_ZKMod proto.InternalMessageInfo

func (m *ZKMod) GetW() *math_big.Int {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *ZKMod) GetX() *IntSlice {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ZKMod) GetA() []bool {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKMod) GetB() []bool {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *ZKMod) GetZ() *IntSlice {
	if m != nil {
		return m.Z
	}
	return nil
}

type ZKPrm struct {
	A *IntSlice `protobuf:"bytes,1,opt,name=a,proto3,casttypewith=IntSlice;IntSliceCaster" json:"a,omitempty"`
	Z *IntSlice `protobuf:"bytes,2,opt,name=z,proto3,casttypewith=IntSlice;IntSliceCaster" json:"z,omitempty"`
}

func (m *ZKPrm) Reset()      { *m = ZKPrm{} }
func (*ZKPrm) ProtoMessage() {}
func (*ZKPrm) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{1}
}
func (m *ZKPrm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKPrm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKPrm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKPrm.Merge(m, src)
}
func (m *ZKPrm) XXX_Size() int {
	return m.Size()
}
func (m *ZKPrm) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKPrm.DiscardUnknown(m)
}

var xxx_messageInfo_ZKPrm proto.InternalMessageInfo

func (m *ZKPrm) GetA() *IntSlice {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKPrm) GetZ() *IntSlice {
	if m != nil {
		return m.Z
	}
	return nil
}

type ZKEnc struct {
	S  *math_big.Int                                             `protobuf:"bytes,1,opt,name=S,proto3,casttypewith=math/big.Int;IntCaster" json:"S,omitempty"`
	A  *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext `protobuf:"bytes,2,opt,name=A,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster" json:"A,omitempty"`
	C  *math_big.Int                                             `protobuf:"bytes,3,opt,name=C,proto3,casttypewith=math/big.Int;IntCaster" json:"C,omitempty"`
	Z1 *math_big.Int                                             `protobuf:"bytes,4,opt,name=Z1,proto3,casttypewith=math/big.Int;IntCaster" json:"Z1,omitempty"`
	Z2 *math_big.Int                                             `protobuf:"bytes,5,opt,name=Z2,proto3,casttypewith=math/big.Int;IntCaster" json:"Z2,omitempty"`
	Z3 *math_big.Int                                             `protobuf:"bytes,6,opt,name=Z3,proto3,casttypewith=math/big.Int;IntCaster" json:"Z3,omitempty"`
}

func (m *ZKEnc) Reset()      { *m = ZKEnc{} }
func (*ZKEnc) ProtoMessage() {}
func (*ZKEnc) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{2}
}
func (m *ZKEnc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKEnc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKEnc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKEnc.Merge(m, src)
}
func (m *ZKEnc) XXX_Size() int {
	return m.Size()
}
func (m *ZKEnc) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKEnc.DiscardUnknown(m)
}

var xxx_messageInfo_ZKEnc proto.InternalMessageInfo

func (m *ZKEnc) GetS() *math_big.Int {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *ZKEnc) GetA() *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKEnc) GetC() *math_big.Int {
	if m != nil {
		return m.C
	}
	return nil
}

func (m *ZKEnc) GetZ1() *math_big.Int {
	if m != nil {
		return m.Z1
	}
	return nil
}

func (m *ZKEnc) GetZ2() *math_big.Int {
	if m != nil {
		return m.Z2
	}
	return nil
}

func (m *ZKEnc) GetZ3() *math_big.Int {
	if m != nil {
		return m.Z3
	}
	return nil
}

type ZKLogStar struct {
	S  *math_big.Int                                          `protobuf:"bytes,1,opt,name=S,proto3,casttypewith=math/big.Int;IntCaster" json:"S,omitempty"`
	A  *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point `protobuf:"bytes,2,opt,name=A,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster" json:"A,omitempty"`
	Y  *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point `protobuf:"bytes,3,opt,name=Y,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster" json:"Y,omitempty"`
	D  *math_big.Int                                          `protobuf:"bytes,4,opt,name=D,proto3,casttypewith=math/big.Int;IntCaster" json:"D,omitempty"`
	Z1 *math_big.Int                                          `protobuf:"bytes,5,opt,name=Z1,proto3,casttypewith=math/big.Int;IntCaster" json:"Z1,omitempty"`
	Z2 *math_big.Int                                          `protobuf:"bytes,6,opt,name=Z2,proto3,casttypewith=math/big.Int;IntCaster" json:"Z2,omitempty"`
	Z3 *math_big.Int                                          `protobuf:"bytes,7,opt,name=Z3,proto3,casttypewith=math/big.Int;IntCaster" json:"Z3,omitempty"`
}

func (m *ZKLogStar) Reset()      { *m = ZKLogStar{} }
func (*ZKLogStar) ProtoMessage() {}
func (*ZKLogStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{3}
}
func (m *ZKLogStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKLogStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKLogStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKLogStar.Merge(m, src)
}
func (m *ZKLogStar) XXX_Size() int {
	return m.Size()
}
func (m *ZKLogStar) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKLogStar.DiscardUnknown(m)
}

var xxx_messageInfo_ZKLogStar proto.InternalMessageInfo

func (m *ZKLogStar) GetS() *math_big.Int {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *ZKLogStar) GetA() *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKLogStar) GetY() *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *ZKLogStar) GetD() *math_big.Int {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *ZKLogStar) GetZ1() *math_big.Int {
	if m != nil {
		return m.Z1
	}
	return nil
}

func (m *ZKLogStar) GetZ2() *math_big.Int {
	if m != nil {
		return m.Z2
	}
	return nil
}

func (m *ZKLogStar) GetZ3() *math_big.Int {
	if m != nil {
		return m.Z3
	}
	return nil
}

type ZKAffG struct {
	A  *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext `protobuf:"bytes,1,opt,name=A,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster" json:"A,omitempty"`
	Bx *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point    `protobuf:"bytes,2,opt,name=Bx,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster" json:"Bx,omitempty"`
	By *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext `protobuf:"bytes,3,opt,name=By,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster" json:"By,omitempty"`
	E  *math_big.Int                                             `protobuf:"bytes,4,opt,name=E,proto3,casttypewith=math/big.Int;IntCaster" json:"E,omitempty"`
	S  *math_big.Int                                             `protobuf:"bytes,5,opt,name=S,proto3,casttypewith=math/big.Int;IntCaster" json:"S,omitempty"`
	F  *math_big.Int                                             `protobuf:"bytes,6,opt,name=F,proto3,casttypewith=math/big.Int;IntCaster" json:"F,omitempty"`
	T  *math_big.Int                                             `protobuf:"bytes,7,opt,name=T,proto3,casttypewith=math/big.Int;IntCaster" json:"T,omitempty"`
	Z1 *math_big.Int                                             `protobuf:"bytes,8,opt,name=Z1,proto3,casttypewith=math/big.Int;IntCaster" json:"Z1,omitempty"`
	Z2 *math_big.Int                                             `protobuf:"bytes,9,opt,name=Z2,proto3,casttypewith=math/big.Int;IntCaster" json:"Z2,omitempty"`
	Z3 *math_big.Int                                             `protobuf:"bytes,10,opt,name=Z3,proto3,casttypewith=math/big.Int;IntCaster" json:"Z3,omitempty"`
	Z4 *math_big.Int                                             `protobuf:"bytes,11,opt,name=Z4,proto3,casttypewith=math/big.Int;IntCaster" json:"Z4,omitempty"`
	W  *math_big.Int                                             `protobuf:"bytes,12,opt,name=W,proto3,casttypewith=math/big.Int;IntCaster" json:"W,omitempty"`
	Wy *math_big.Int                                             `protobuf:"bytes,13,opt,name=Wy,proto3,casttypewith=math/big.Int;IntCaster" json:"Wy,omitempty"`
}

func (m *ZKAffG) Reset()      { *m = ZKAffG{} }
func (*ZKAffG) ProtoMessage() {}
func (*ZKAffG) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{4}
}
func (m *ZKAffG) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKAffG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKAffG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKAffG.Merge(m, src)
}
func (m *ZKAffG) XXX_Size() int {
	return m.Size()
}
func (m *ZKAffG) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKAffG.DiscardUnknown(m)
}

var xxx_messageInfo_ZKAffG proto.InternalMessageInfo

func (m *ZKAffG) GetA() *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKAffG) GetBx() *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point {
	if m != nil {
		return m.Bx
	}
	return nil
}

func (m *ZKAffG) GetBy() *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *ZKAffG) GetE() *math_big.Int {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *ZKAffG) GetS() *math_big.Int {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *ZKAffG) GetF() *math_big.Int {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *ZKAffG) GetT() *math_big.Int {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *ZKAffG) GetZ1() *math_big.Int {
	if m != nil {
		return m.Z1
	}
	return nil
}

func (m *ZKAffG) GetZ2() *math_big.Int {
	if m != nil {
		return m.Z2
	}
	return nil
}

func (m *ZKAffG) GetZ3() *math_big.Int {
	if m != nil {
		return m.Z3
	}
	return nil
}

func (m *ZKAffG) GetZ4() *math_big.Int {
	if m != nil {
		return m.Z4
	}
	return nil
}

func (m *ZKAffG) GetW() *math_big.Int {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *ZKAffG) GetWy() *math_big.Int {
	if m != nil {
		return m.Wy
	}
	return nil
}

type ZKMulStar struct {
	A  *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext `protobuf:"bytes,1,opt,name=A,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster" json:"A,omitempty"`
	Bx *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point    `protobuf:"bytes,2,opt,name=Bx,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster" json:"Bx,omitempty"`
	E  *math_big.Int                                             `protobuf:"bytes,4,opt,name=E,proto3,casttypewith=math/big.Int;IntCaster" json:"E,omitempty"`
	S  *math_big.Int                                             `protobuf:"bytes,5,opt,name=S,proto3,casttypewith=math/big.Int;IntCaster" json:"S,omitempty"`
	Z1 *math_big.Int                                             `protobuf:"bytes,8,opt,name=Z1,proto3,casttypewith=math/big.Int;IntCaster" json:"Z1,omitempty"`
	Z2 *math_big.Int                                             `protobuf:"bytes,9,opt,name=Z2,proto3,casttypewith=math/big.Int;IntCaster" json:"Z2,omitempty"`
	W  *math_big.Int                                             `protobuf:"bytes,12,opt,name=W,proto3,casttypewith=math/big.Int;IntCaster" json:"W,omitempty"`
}

func (m *ZKMulStar) Reset()      { *m = ZKMulStar{} }
func (*ZKMulStar) ProtoMessage() {}
func (*ZKMulStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{5}
}
func (m *ZKMulStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKMulStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKMulStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKMulStar.Merge(m, src)
}
func (m *ZKMulStar) XXX_Size() int {
	return m.Size()
}
func (m *ZKMulStar) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKMulStar.DiscardUnknown(m)
}

var xxx_messageInfo_ZKMulStar proto.InternalMessageInfo

func (m *ZKMulStar) GetA() *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKMulStar) GetBx() *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point {
	if m != nil {
		return m.Bx
	}
	return nil
}

func (m *ZKMulStar) GetE() *math_big.Int {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *ZKMulStar) GetS() *math_big.Int {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *ZKMulStar) GetZ1() *math_big.Int {
	if m != nil {
		return m.Z1
	}
	return nil
}

func (m *ZKMulStar) GetZ2() *math_big.Int {
	if m != nil {
		return m.Z2
	}
	return nil
}

func (m *ZKMulStar) GetW() *math_big.Int {
	if m != nil {
		return m.W
	}
	return nil
}

type ZKMul struct {
	A *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext `protobuf:"bytes,1,opt,name=A,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster" json:"A,omitempty"`
	B *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext `protobuf:"bytes,2,opt,name=B,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster" json:"B,omitempty"`
	Z *math_big.Int                                             `protobuf:"bytes,3,opt,name=Z,proto3,casttypewith=math/big.Int;IntCaster" json:"Z,omitempty"`
	U *math_big.Int                                             `protobuf:"bytes,4,opt,name=U,proto3,casttypewith=math/big.Int;IntCaster" json:"U,omitempty"`
	V *math_big.Int                                             `protobuf:"bytes,5,opt,name=V,proto3,casttypewith=math/big.Int;IntCaster" json:"V,omitempty"`
}

func (m *ZKMul) Reset()      { *m = ZKMul{} }
func (*ZKMul) ProtoMessage() {}
func (*ZKMul) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{6}
}
func (m *ZKMul) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKMul) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKMul) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKMul.Merge(m, src)
}
func (m *ZKMul) XXX_Size() int {
	return m.Size()
}
func (m *ZKMul) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKMul.DiscardUnknown(m)
}

var xxx_messageInfo_ZKMul proto.InternalMessageInfo

func (m *ZKMul) GetA() *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKMul) GetB() *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *ZKMul) GetZ() *math_big.Int {
	if m != nil {
		return m.Z
	}
	return nil
}

func (m *ZKMul) GetU() *math_big.Int {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *ZKMul) GetV() *math_big.Int {
	if m != nil {
		return m.V
	}
	return nil
}

type ZKDec struct {
	S     *math_big.Int                                             `protobuf:"bytes,1,opt,name=S,proto3,casttypewith=math/big.Int;IntCaster" json:"S,omitempty"`
	T     *math_big.Int                                             `protobuf:"bytes,2,opt,name=T,proto3,casttypewith=math/big.Int;IntCaster" json:"T,omitempty"`
	A     *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext `protobuf:"bytes,3,opt,name=A,proto3,casttypewith=github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster" json:"A,omitempty"`
	Gamma *Scalar                                                   `protobuf:"bytes,4,opt,name=Gamma,proto3" json:"Gamma,omitempty"`
	Z1    *math_big.Int                                             `protobuf:"bytes,5,opt,name=Z1,proto3,casttypewith=math/big.Int;IntCaster" json:"Z1,omitempty"`
	Z2    *math_big.Int                                             `protobuf:"bytes,6,opt,name=Z2,proto3,casttypewith=math/big.Int;IntCaster" json:"Z2,omitempty"`
	W     *math_big.Int                                             `protobuf:"bytes,7,opt,name=W,proto3,casttypewith=math/big.Int;IntCaster" json:"W,omitempty"`
}

func (m *ZKDec) Reset()      { *m = ZKDec{} }
func (*ZKDec) ProtoMessage() {}
func (*ZKDec) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaef2932a3f8a405, []int{7}
}
func (m *ZKDec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKDec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZKDec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKDec.Merge(m, src)
}
func (m *ZKDec) XXX_Size() int {
	return m.Size()
}
func (m *ZKDec) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKDec.DiscardUnknown(m)
}

var xxx_messageInfo_ZKDec proto.InternalMessageInfo

func (m *ZKDec) GetS() *math_big.Int {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *ZKDec) GetT() *math_big.Int {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *ZKDec) GetA() *github_com_taurusgroup_cmp_ecdsa_pkg_paillier.Ciphertext {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ZKDec) GetGamma() *Scalar {
	if m != nil {
		return m.Gamma
	}
	return nil
}

func (m *ZKDec) GetZ1() *math_big.Int {
	if m != nil {
		return m.Z1
	}
	return nil
}

func (m *ZKDec) GetZ2() *math_big.Int {
	if m != nil {
		return m.Z2
	}
	return nil
}

func (m *ZKDec) GetW() *math_big.Int {
	if m != nil {
		return m.W
	}
	return nil
}

func init() {
	proto.RegisterType((*ZKMod)(nil), "pb.ZKMod")
	proto.RegisterType((*ZKPrm)(nil), "pb.ZKPrm")
	proto.RegisterType((*ZKEnc)(nil), "pb.ZKEnc")
	proto.RegisterType((*ZKLogStar)(nil), "pb.ZKLogStar")
	proto.RegisterType((*ZKAffG)(nil), "pb.ZKAffG")
	proto.RegisterType((*ZKMulStar)(nil), "pb.ZKMulStar")
	proto.RegisterType((*ZKMul)(nil), "pb.ZKMul")
	proto.RegisterType((*ZKDec)(nil), "pb.ZKDec")
}

func init() { proto.RegisterFile("zk.proto", fileDescriptor_aaef2932a3f8a405) }

var fileDescriptor_aaef2932a3f8a405 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x3f, 0x4f, 0xdb, 0x40,
	0x1c, 0xcd, 0xcf, 0x21, 0x29, 0x1c, 0x74, 0xf1, 0xd0, 0x5a, 0x54, 0xba, 0xa0, 0x4c, 0x69, 0x25,
	0x1c, 0xf1, 0x67, 0xa8, 0x94, 0x29, 0x0e, 0x01, 0x45, 0x34, 0x12, 0xc2, 0x40, 0x84, 0x11, 0xc3,
	0xd9, 0x18, 0x63, 0x91, 0xc4, 0x96, 0x73, 0x2e, 0x09, 0x53, 0xbf, 0x40, 0xa5, 0x2e, 0xfd, 0x04,
	0x5d, 0xaa, 0x7c, 0x86, 0x4a, 0x5d, 0xdb, 0x8d, 0x91, 0xa1, 0x52, 0x8a, 0x59, 0x3a, 0xf2, 0x11,
	0xaa, 0x3b, 0x1b, 0xd1, 0x89, 0x9c, 0x25, 0x3c, 0x74, 0xb1, 0xee, 0x27, 0xbf, 0x7b, 0xfa, 0xdd,
	0x7b, 0x4f, 0xbf, 0x3b, 0x34, 0x7b, 0x79, 0xae, 0xfa, 0x81, 0x47, 0x3d, 0x59, 0xf2, 0xcd, 0xc5,
	0x65, 0xc7, 0xa5, 0x67, 0xa1, 0xa9, 0x5a, 0x5e, 0xaf, 0xea, 0x78, 0x8e, 0x57, 0xe5, 0xbf, 0xcc,
	0xf0, 0x94, 0x57, 0xbc, 0xe0, 0xab, 0x78, 0xcb, 0xe2, 0x3c, 0x1d, 0xf9, 0xf6, 0x20, 0x2e, 0xca,
	0x5f, 0x00, 0x15, 0x8c, 0xed, 0xb6, 0x77, 0x22, 0x57, 0x10, 0x5c, 0x28, 0xb0, 0x04, 0x95, 0x05,
	0x6d, 0x71, 0x3c, 0x29, 0xbd, 0xe8, 0x11, 0x7a, 0x56, 0x35, 0x5d, 0x47, 0x6d, 0xf5, 0x69, 0xad,
	0xd5, 0xa7, 0x0d, 0x32, 0xa0, 0x76, 0xb0, 0x0b, 0x17, 0xf2, 0x6b, 0x04, 0x43, 0x45, 0xe2, 0xc8,
	0x57, 0xe3, 0x49, 0xe9, 0x65, 0xab, 0x4f, 0xf5, 0xae, 0x6b, 0xd9, 0xb5, 0xfb, 0xc5, 0x3d, 0x74,
	0x28, 0x2f, 0x20, 0x20, 0x4a, 0x7e, 0x29, 0x5f, 0x99, 0xdd, 0x05, 0xc2, 0x2a, 0x53, 0x99, 0x89,
	0x2b, 0x93, 0xd1, 0x5c, 0x2a, 0x05, 0x01, 0x9a, 0xcb, 0xf2, 0x31, 0x6b, 0x72, 0x27, 0xe8, 0xb1,
	0x3d, 0x24, 0x69, 0xf2, 0xf1, 0x3d, 0x24, 0xa6, 0x97, 0x84, 0xe8, 0xbf, 0x49, 0x8c, 0xbf, 0xd9,
	0xb7, 0x98, 0x08, 0xba, 0x88, 0x08, 0xba, 0x7c, 0x84, 0xa0, 0x9e, 0xd0, 0xb7, 0xc7, 0x93, 0x52,
	0xeb, 0x1f, 0x0f, 0x28, 0x09, 0x83, 0x70, 0xe0, 0x04, 0x5e, 0xe8, 0x57, 0xad, 0x9e, 0xbf, 0x6c,
	0x5b, 0x27, 0x03, 0x52, 0xf5, 0xcf, 0x9d, 0xaa, 0x4f, 0xdc, 0x6e, 0xd7, 0xb5, 0x03, 0xb5, 0xe1,
	0xfa, 0x67, 0x76, 0x40, 0xed, 0x21, 0xad, 0x3d, 0x2c, 0xef, 0xc9, 0xeb, 0xac, 0x8d, 0x86, 0x92,
	0x9f, 0xde, 0x46, 0x43, 0x7e, 0x83, 0x24, 0x63, 0x45, 0x99, 0x99, 0x0a, 0x95, 0x8c, 0x15, 0x8e,
	0x5d, 0x4d, 0x14, 0x7f, 0x1c, 0xbb, 0xca, 0xb1, 0x6b, 0x4a, 0x51, 0x00, 0xbb, 0x56, 0xfe, 0x98,
	0x47, 0x73, 0xc6, 0xf6, 0x3b, 0xcf, 0xd1, 0x29, 0x09, 0x52, 0x48, 0xa8, 0x3f, 0x48, 0xd8, 0x1c,
	0x4f, 0x4a, 0x75, 0x21, 0x09, 0x39, 0x9d, 0x15, 0x06, 0xef, 0x6d, 0x75, 0xc7, 0x73, 0xfb, 0xb4,
	0xc6, 0xbf, 0x0f, 0xd2, 0xe9, 0x08, 0x0e, 0x13, 0xe9, 0x9e, 0x8a, 0xf4, 0x90, 0x9d, 0x69, 0x43,
	0x40, 0x64, 0xd8, 0x48, 0xfc, 0x28, 0xa4, 0xf0, 0xa3, 0x98, 0xc2, 0x8f, 0x67, 0x42, 0x7e, 0xfc,
	0x2c, 0xa0, 0xa2, 0xb1, 0x5d, 0x3f, 0x3d, 0xdd, 0x8a, 0x53, 0x0a, 0x19, 0xa5, 0x74, 0x1f, 0x49,
	0xda, 0xf0, 0x69, 0x0d, 0x94, 0xb4, 0xa1, 0x7c, 0x8c, 0x24, 0x6d, 0x94, 0x58, 0xf8, 0xc4, 0x4d,
	0x4b, 0xda, 0x88, 0x79, 0xd9, 0x14, 0xf1, 0xb2, 0x19, 0x27, 0xb9, 0x20, 0x92, 0xe4, 0x0a, 0x82,
	0x4d, 0x01, 0x23, 0x61, 0x93, 0x21, 0xf7, 0x04, 0x6c, 0x84, 0xbd, 0x24, 0x49, 0xb3, 0x29, 0x92,
	0x34, 0x97, 0x22, 0x49, 0x48, 0x24, 0x49, 0x1c, 0xbb, 0xae, 0xcc, 0x0b, 0x60, 0xd7, 0xd9, 0xc9,
	0x3a, 0xca, 0xc2, 0xf4, 0x93, 0x75, 0x18, 0x6b, 0x67, 0xa4, 0x3c, 0x9f, 0xce, 0xda, 0x19, 0x95,
	0x3f, 0xf3, 0xd9, 0xd2, 0x0e, 0xbb, 0x7c, 0xb6, 0xfc, 0x8f, 0x71, 0xce, 0x22, 0x6f, 0x59, 0x65,
	0x43, 0xd8, 0xc3, 0xf2, 0x77, 0x7e, 0x65, 0xb6, 0xc3, 0x6e, 0xb6, 0x9e, 0x1c, 0x21, 0xd0, 0x32,
	0xba, 0x65, 0x35, 0x76, 0x5a, 0x43, 0xe4, 0x96, 0x35, 0x18, 0x72, 0x5f, 0xc4, 0xc3, 0x7d, 0x86,
	0x3c, 0x10, 0xf1, 0xf0, 0xa0, 0xfc, 0x8b, 0x2b, 0xb8, 0x61, 0xa7, 0x79, 0x74, 0xf0, 0xe9, 0x21,
	0x89, 0x4c, 0x0f, 0xee, 0x4a, 0x3e, 0x23, 0x57, 0x96, 0x50, 0x61, 0x8b, 0xf4, 0x7a, 0x84, 0x4b,
	0x32, 0xbf, 0x8a, 0x54, 0xdf, 0x54, 0x75, 0x8b, 0x74, 0x49, 0xb0, 0x1b, 0xff, 0xc8, 0xec, 0x1a,
	0xe4, 0x01, 0x15, 0x18, 0x9f, 0x1d, 0xed, 0xed, 0xd5, 0x0d, 0xce, 0x5d, 0xdf, 0xe0, 0xdc, 0xdd,
	0x0d, 0x86, 0x0f, 0x11, 0x86, 0xaf, 0x11, 0x86, 0x1f, 0x11, 0x86, 0xab, 0x08, 0xc3, 0x75, 0x84,
	0xe1, 0x77, 0x84, 0xe1, 0x4f, 0x84, 0x73, 0x77, 0x11, 0x86, 0x4f, 0xb7, 0x38, 0x77, 0x75, 0x8b,
	0x73, 0xd7, 0xb7, 0x38, 0x67, 0x16, 0xf9, 0xcb, 0x78, 0xed, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa2, 0x9c, 0x3f, 0x22, 0x65, 0x0b, 0x00, 0x00,
}

func (this *ZKMod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKMod)
	if !ok {
		that2, ok := that.(ZKMod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.W, that1.W) {
			return false
		}
	}
	{
		__caster := &IntSliceCaster{}
		if !__caster.Equal(this.X, that1.X) {
			return false
		}
	}
	if len(this.A) != len(that1.A) {
		return false
	}
	for i := range this.A {
		if this.A[i] != that1.A[i] {
			return false
		}
	}
	if len(this.B) != len(that1.B) {
		return false
	}
	for i := range this.B {
		if this.B[i] != that1.B[i] {
			return false
		}
	}
	{
		__caster := &IntSliceCaster{}
		if !__caster.Equal(this.Z, that1.Z) {
			return false
		}
	}
	return true
}
func (this *ZKPrm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKPrm)
	if !ok {
		that2, ok := that.(ZKPrm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &IntSliceCaster{}
		if !__caster.Equal(this.A, that1.A) {
			return false
		}
	}
	{
		__caster := &IntSliceCaster{}
		if !__caster.Equal(this.Z, that1.Z) {
			return false
		}
	}
	return true
}
func (this *ZKEnc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKEnc)
	if !ok {
		that2, ok := that.(ZKEnc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.S, that1.S) {
			return false
		}
	}
	{
		__caster := &CiphertextCaster{}
		if !__caster.Equal(this.A, that1.A) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.C, that1.C) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z1, that1.Z1) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z2, that1.Z2) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z3, that1.Z3) {
			return false
		}
	}
	return true
}
func (this *ZKLogStar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKLogStar)
	if !ok {
		that2, ok := that.(ZKLogStar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.S, that1.S) {
			return false
		}
	}
	{
		__caster := &PointCaster{}
		if !__caster.Equal(this.A, that1.A) {
			return false
		}
	}
	{
		__caster := &PointCaster{}
		if !__caster.Equal(this.Y, that1.Y) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.D, that1.D) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z1, that1.Z1) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z2, that1.Z2) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z3, that1.Z3) {
			return false
		}
	}
	return true
}
func (this *ZKAffG) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKAffG)
	if !ok {
		that2, ok := that.(ZKAffG)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &CiphertextCaster{}
		if !__caster.Equal(this.A, that1.A) {
			return false
		}
	}
	{
		__caster := &PointCaster{}
		if !__caster.Equal(this.Bx, that1.Bx) {
			return false
		}
	}
	{
		__caster := &CiphertextCaster{}
		if !__caster.Equal(this.By, that1.By) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.E, that1.E) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.S, that1.S) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.F, that1.F) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.T, that1.T) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z1, that1.Z1) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z2, that1.Z2) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z3, that1.Z3) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z4, that1.Z4) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.W, that1.W) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Wy, that1.Wy) {
			return false
		}
	}
	return true
}
func (this *ZKMulStar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKMulStar)
	if !ok {
		that2, ok := that.(ZKMulStar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &CiphertextCaster{}
		if !__caster.Equal(this.A, that1.A) {
			return false
		}
	}
	{
		__caster := &PointCaster{}
		if !__caster.Equal(this.Bx, that1.Bx) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.E, that1.E) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.S, that1.S) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z1, that1.Z1) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z2, that1.Z2) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.W, that1.W) {
			return false
		}
	}
	return true
}
func (this *ZKMul) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKMul)
	if !ok {
		that2, ok := that.(ZKMul)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &CiphertextCaster{}
		if !__caster.Equal(this.A, that1.A) {
			return false
		}
	}
	{
		__caster := &CiphertextCaster{}
		if !__caster.Equal(this.B, that1.B) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z, that1.Z) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.U, that1.U) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.V, that1.V) {
			return false
		}
	}
	return true
}
func (this *ZKDec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZKDec)
	if !ok {
		that2, ok := that.(ZKDec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.S, that1.S) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.T, that1.T) {
			return false
		}
	}
	{
		__caster := &CiphertextCaster{}
		if !__caster.Equal(this.A, that1.A) {
			return false
		}
	}
	if !this.Gamma.Equal(that1.Gamma) {
		return false
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z1, that1.Z1) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.Z2, that1.Z2) {
			return false
		}
	}
	{
		__caster := &IntCaster{}
		if !__caster.Equal(this.W, that1.W) {
			return false
		}
	}
	return true
}
func (this *ZKMod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.ZKMod{")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "Z: "+fmt.Sprintf("%#v", this.Z)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZKPrm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ZKPrm{")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	s = append(s, "Z: "+fmt.Sprintf("%#v", this.Z)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZKEnc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.ZKEnc{")
	s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	s = append(s, "C: "+fmt.Sprintf("%#v", this.C)+",\n")
	s = append(s, "Z1: "+fmt.Sprintf("%#v", this.Z1)+",\n")
	s = append(s, "Z2: "+fmt.Sprintf("%#v", this.Z2)+",\n")
	s = append(s, "Z3: "+fmt.Sprintf("%#v", this.Z3)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZKLogStar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ZKLogStar{")
	s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "D: "+fmt.Sprintf("%#v", this.D)+",\n")
	s = append(s, "Z1: "+fmt.Sprintf("%#v", this.Z1)+",\n")
	s = append(s, "Z2: "+fmt.Sprintf("%#v", this.Z2)+",\n")
	s = append(s, "Z3: "+fmt.Sprintf("%#v", this.Z3)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZKAffG) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&pb.ZKAffG{")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	s = append(s, "Bx: "+fmt.Sprintf("%#v", this.Bx)+",\n")
	s = append(s, "By: "+fmt.Sprintf("%#v", this.By)+",\n")
	s = append(s, "E: "+fmt.Sprintf("%#v", this.E)+",\n")
	s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	s = append(s, "F: "+fmt.Sprintf("%#v", this.F)+",\n")
	s = append(s, "T: "+fmt.Sprintf("%#v", this.T)+",\n")
	s = append(s, "Z1: "+fmt.Sprintf("%#v", this.Z1)+",\n")
	s = append(s, "Z2: "+fmt.Sprintf("%#v", this.Z2)+",\n")
	s = append(s, "Z3: "+fmt.Sprintf("%#v", this.Z3)+",\n")
	s = append(s, "Z4: "+fmt.Sprintf("%#v", this.Z4)+",\n")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "Wy: "+fmt.Sprintf("%#v", this.Wy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZKMulStar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ZKMulStar{")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	s = append(s, "Bx: "+fmt.Sprintf("%#v", this.Bx)+",\n")
	s = append(s, "E: "+fmt.Sprintf("%#v", this.E)+",\n")
	s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	s = append(s, "Z1: "+fmt.Sprintf("%#v", this.Z1)+",\n")
	s = append(s, "Z2: "+fmt.Sprintf("%#v", this.Z2)+",\n")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZKMul) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.ZKMul{")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "Z: "+fmt.Sprintf("%#v", this.Z)+",\n")
	s = append(s, "U: "+fmt.Sprintf("%#v", this.U)+",\n")
	s = append(s, "V: "+fmt.Sprintf("%#v", this.V)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZKDec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ZKDec{")
	s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	s = append(s, "T: "+fmt.Sprintf("%#v", this.T)+",\n")
	s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	if this.Gamma != nil {
		s = append(s, "Gamma: "+fmt.Sprintf("%#v", this.Gamma)+",\n")
	}
	s = append(s, "Z1: "+fmt.Sprintf("%#v", this.Z1)+",\n")
	s = append(s, "Z2: "+fmt.Sprintf("%#v", this.Z2)+",\n")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringZk(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ZKMod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKMod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKMod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntSliceCaster{}
		size := __caster.Size(m.Z)
		i -= size
		if _, err := __caster.MarshalTo(m.Z, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.B) > 0 {
		for iNdEx := len(m.B) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.B[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintZk(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.A) > 0 {
		for iNdEx := len(m.A) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.A[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintZk(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0x1a
	}
	{
		__caster := &IntSliceCaster{}
		size := __caster.Size(m.X)
		i -= size
		if _, err := __caster.MarshalTo(m.X, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.W)
		i -= size
		if _, err := __caster.MarshalTo(m.W, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZKPrm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKPrm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKPrm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntSliceCaster{}
		size := __caster.Size(m.Z)
		i -= size
		if _, err := __caster.MarshalTo(m.Z, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &IntSliceCaster{}
		size := __caster.Size(m.A)
		i -= size
		if _, err := __caster.MarshalTo(m.A, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZKEnc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKEnc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKEnc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z3)
		i -= size
		if _, err := __caster.MarshalTo(m.Z3, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z2)
		i -= size
		if _, err := __caster.MarshalTo(m.Z2, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z1)
		i -= size
		if _, err := __caster.MarshalTo(m.Z1, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.C)
		i -= size
		if _, err := __caster.MarshalTo(m.C, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &CiphertextCaster{}
		size := __caster.Size(m.A)
		i -= size
		if _, err := __caster.MarshalTo(m.A, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZKLogStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKLogStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKLogStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z3)
		i -= size
		if _, err := __caster.MarshalTo(m.Z3, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z2)
		i -= size
		if _, err := __caster.MarshalTo(m.Z2, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z1)
		i -= size
		if _, err := __caster.MarshalTo(m.Z1, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.D)
		i -= size
		if _, err := __caster.MarshalTo(m.D, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &PointCaster{}
		size := __caster.Size(m.Y)
		i -= size
		if _, err := __caster.MarshalTo(m.Y, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &PointCaster{}
		size := __caster.Size(m.A)
		i -= size
		if _, err := __caster.MarshalTo(m.A, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZKAffG) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKAffG) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKAffG) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Wy)
		i -= size
		if _, err := __caster.MarshalTo(m.Wy, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.W)
		i -= size
		if _, err := __caster.MarshalTo(m.W, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z4)
		i -= size
		if _, err := __caster.MarshalTo(m.Z4, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z3)
		i -= size
		if _, err := __caster.MarshalTo(m.Z3, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z2)
		i -= size
		if _, err := __caster.MarshalTo(m.Z2, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z1)
		i -= size
		if _, err := __caster.MarshalTo(m.Z1, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.T)
		i -= size
		if _, err := __caster.MarshalTo(m.T, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.F)
		i -= size
		if _, err := __caster.MarshalTo(m.F, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.E)
		i -= size
		if _, err := __caster.MarshalTo(m.E, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &CiphertextCaster{}
		size := __caster.Size(m.By)
		i -= size
		if _, err := __caster.MarshalTo(m.By, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &PointCaster{}
		size := __caster.Size(m.Bx)
		i -= size
		if _, err := __caster.MarshalTo(m.Bx, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &CiphertextCaster{}
		size := __caster.Size(m.A)
		i -= size
		if _, err := __caster.MarshalTo(m.A, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZKMulStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKMulStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKMulStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.W)
		i -= size
		if _, err := __caster.MarshalTo(m.W, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z2)
		i -= size
		if _, err := __caster.MarshalTo(m.Z2, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z1)
		i -= size
		if _, err := __caster.MarshalTo(m.Z1, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.E)
		i -= size
		if _, err := __caster.MarshalTo(m.E, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &PointCaster{}
		size := __caster.Size(m.Bx)
		i -= size
		if _, err := __caster.MarshalTo(m.Bx, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &CiphertextCaster{}
		size := __caster.Size(m.A)
		i -= size
		if _, err := __caster.MarshalTo(m.A, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZKMul) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKMul) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKMul) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.V)
		i -= size
		if _, err := __caster.MarshalTo(m.V, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.U)
		i -= size
		if _, err := __caster.MarshalTo(m.U, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z)
		i -= size
		if _, err := __caster.MarshalTo(m.Z, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &CiphertextCaster{}
		size := __caster.Size(m.B)
		i -= size
		if _, err := __caster.MarshalTo(m.B, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &CiphertextCaster{}
		size := __caster.Size(m.A)
		i -= size
		if _, err := __caster.MarshalTo(m.A, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZKDec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKDec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKDec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.W)
		i -= size
		if _, err := __caster.MarshalTo(m.W, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z2)
		i -= size
		if _, err := __caster.MarshalTo(m.Z2, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.Z1)
		i -= size
		if _, err := __caster.MarshalTo(m.Z1, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Gamma != nil {
		{
			size, err := m.Gamma.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		__caster := &CiphertextCaster{}
		size := __caster.Size(m.A)
		i -= size
		if _, err := __caster.MarshalTo(m.A, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.T)
		i -= size
		if _, err := __caster.MarshalTo(m.T, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintZk(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintZk(dAtA []byte, offset int, v uint64) int {
	offset -= sovZk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZKMod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.W)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntSliceCaster{}
		l = __caster.Size(m.X)
		n += 1 + l + sovZk(uint64(l))
	}
	if len(m.A) > 0 {
		n += 1 + sovZk(uint64(len(m.A))) + len(m.A)*1
	}
	if len(m.B) > 0 {
		n += 1 + sovZk(uint64(len(m.B))) + len(m.B)*1
	}
	{
		__caster := &IntSliceCaster{}
		l = __caster.Size(m.Z)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZKPrm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &IntSliceCaster{}
		l = __caster.Size(m.A)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntSliceCaster{}
		l = __caster.Size(m.Z)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZKEnc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &CiphertextCaster{}
		l = __caster.Size(m.A)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.C)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z1)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z2)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z3)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZKLogStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &PointCaster{}
		l = __caster.Size(m.A)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &PointCaster{}
		l = __caster.Size(m.Y)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.D)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z1)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z2)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z3)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZKAffG) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &CiphertextCaster{}
		l = __caster.Size(m.A)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &PointCaster{}
		l = __caster.Size(m.Bx)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &CiphertextCaster{}
		l = __caster.Size(m.By)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.E)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.F)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.T)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z1)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z2)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z3)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z4)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.W)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Wy)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZKMulStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &CiphertextCaster{}
		l = __caster.Size(m.A)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &PointCaster{}
		l = __caster.Size(m.Bx)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.E)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z1)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z2)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.W)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZKMul) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &CiphertextCaster{}
		l = __caster.Size(m.A)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &CiphertextCaster{}
		l = __caster.Size(m.B)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.U)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.V)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZKDec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.T)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &CiphertextCaster{}
		l = __caster.Size(m.A)
		n += 1 + l + sovZk(uint64(l))
	}
	if m.Gamma != nil {
		l = m.Gamma.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z1)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.Z2)
		n += 1 + l + sovZk(uint64(l))
	}
	{
		__caster := &IntCaster{}
		l = __caster.Size(m.W)
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func sovZk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZk(x uint64) (n int) {
	return sovZk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ZKMod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKMod{`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`Z:` + fmt.Sprintf("%v", this.Z) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZKPrm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKPrm{`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`Z:` + fmt.Sprintf("%v", this.Z) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZKEnc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKEnc{`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`C:` + fmt.Sprintf("%v", this.C) + `,`,
		`Z1:` + fmt.Sprintf("%v", this.Z1) + `,`,
		`Z2:` + fmt.Sprintf("%v", this.Z2) + `,`,
		`Z3:` + fmt.Sprintf("%v", this.Z3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZKLogStar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKLogStar{`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`D:` + fmt.Sprintf("%v", this.D) + `,`,
		`Z1:` + fmt.Sprintf("%v", this.Z1) + `,`,
		`Z2:` + fmt.Sprintf("%v", this.Z2) + `,`,
		`Z3:` + fmt.Sprintf("%v", this.Z3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZKAffG) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKAffG{`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`Bx:` + fmt.Sprintf("%v", this.Bx) + `,`,
		`By:` + fmt.Sprintf("%v", this.By) + `,`,
		`E:` + fmt.Sprintf("%v", this.E) + `,`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`F:` + fmt.Sprintf("%v", this.F) + `,`,
		`T:` + fmt.Sprintf("%v", this.T) + `,`,
		`Z1:` + fmt.Sprintf("%v", this.Z1) + `,`,
		`Z2:` + fmt.Sprintf("%v", this.Z2) + `,`,
		`Z3:` + fmt.Sprintf("%v", this.Z3) + `,`,
		`Z4:` + fmt.Sprintf("%v", this.Z4) + `,`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`Wy:` + fmt.Sprintf("%v", this.Wy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZKMulStar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKMulStar{`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`Bx:` + fmt.Sprintf("%v", this.Bx) + `,`,
		`E:` + fmt.Sprintf("%v", this.E) + `,`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`Z1:` + fmt.Sprintf("%v", this.Z1) + `,`,
		`Z2:` + fmt.Sprintf("%v", this.Z2) + `,`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZKMul) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKMul{`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`Z:` + fmt.Sprintf("%v", this.Z) + `,`,
		`U:` + fmt.Sprintf("%v", this.U) + `,`,
		`V:` + fmt.Sprintf("%v", this.V) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZKDec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZKDec{`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`T:` + fmt.Sprintf("%v", this.T) + `,`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`Gamma:` + strings.Replace(fmt.Sprintf("%v", this.Gamma), "Scalar", "Scalar", 1) + `,`,
		`Z1:` + fmt.Sprintf("%v", this.Z1) + `,`,
		`Z2:` + fmt.Sprintf("%v", this.Z2) + `,`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringZk(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ZKMod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKMod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKMod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.W = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntSliceCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.X = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.A = append(m.A, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZk
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZk
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.A) == 0 {
					m.A = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZk
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.A = append(m.A, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.B = append(m.B, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZk
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZk
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.B) == 0 {
					m.B = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZk
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.B = append(m.B, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntSliceCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKPrm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKPrm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKPrm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntSliceCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.A = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntSliceCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKEnc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKEnc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKEnc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &CiphertextCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.A = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.C = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z1 = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z2 = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z3 = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKLogStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKLogStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKLogStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &PointCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.A = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &PointCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Y = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.D = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z1 = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z2 = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z3 = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKAffG) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKAffG: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKAffG: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &CiphertextCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.A = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &PointCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Bx = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field By", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &CiphertextCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.By = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.E = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.F = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.T = tmp
				}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z1 = tmp
				}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z2 = tmp
				}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z3 = tmp
				}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z4", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z4 = tmp
				}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.W = tmp
				}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Wy = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKMulStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKMulStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKMulStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &CiphertextCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.A = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &PointCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Bx = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.E = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z1 = tmp
				}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z2 = tmp
				}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.W = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKMul) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKMul: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKMul: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &CiphertextCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.A = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &CiphertextCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.B = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field U", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.U = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.V = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKDec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKDec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKDec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.T = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &CiphertextCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.A = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gamma", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gamma == nil {
				m.Gamma = &Scalar{}
			}
			if err := m.Gamma.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z1 = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Z2 = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.W = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZk = fmt.Errorf("proto: unexpected end of group")
)

syntax = "proto3";

package pb;

//option go_package = "github.com/taurusgroup/cmp-ecdsa/pb";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "types.proto";

message ZKMod {
  bytes w = 1 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes x = 2 [(gogoproto.casttypewith) = "IntSlice;IntSliceCaster"];
  repeated bool a = 3;
  repeated bool b = 4;
  bytes z = 5 [(gogoproto.casttypewith) = "IntSlice;IntSliceCaster"];
}

message ZKPrm {
  bytes a = 1 [(gogoproto.casttypewith) = "IntSlice;IntSliceCaster"];
  bytes z = 2 [(gogoproto.casttypewith) = "IntSlice;IntSliceCaster"];
}

message ZKEnc {
  bytes S = 1 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes A = 2 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster"];
  bytes C = 3 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z1 = 4 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z2 = 5 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z3 = 6 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
}

message ZKLogStar {
  bytes S = 1 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes A = 2 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster"];
  bytes Y = 3 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster"];
  bytes D = 4 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z1 = 5 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z2 = 6 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z3 = 7 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
}

message ZKAffG {
  bytes A = 1 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster"];
  bytes Bx = 2 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster"];
  bytes By = 3 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster"];
  bytes E = 4 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes S = 5 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes F = 6 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes T = 7 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z1 = 8 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z2 = 9 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z3 = 10 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z4 = 11 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes W = 12 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Wy = 13 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
}

message ZKMulStar {
  bytes A = 1 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster"];
  bytes Bx = 2 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point;PointCaster"];
  bytes E = 4 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes S = 5 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z1 = 8 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z2 = 9 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes W = 12 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
}

message ZKMul {
  bytes A = 1 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster"];
  bytes B = 2 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster"];
  bytes Z = 3 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes U = 4 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes V = 5 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
}

message ZKDec {
  bytes S = 1 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes T = 2 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes A = 3 [(gogoproto.casttypewith) = "github.com/taurusgroup/cmp-ecdsa/pkg/paillier.Ciphertext;CiphertextCaster"];
  Scalar Gamma = 4;
  bytes Z1 = 5 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes Z2 = 6 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
  bytes W = 7 [(gogoproto.casttypewith) = "math/big.Int;IntCaster"];
}
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/cmp/keygen/message.proto

package keygen

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_internal_proto "github.com/taurusgroup/cmp-ecdsa/internal/proto"
	github_com_taurusgroup_cmp_ecdsa_pkg_hash "github.com/taurusgroup/cmp-ecdsa/pkg/hash"
	polynomial "github.com/taurusgroup/cmp-ecdsa/pkg/math/polynomial"
	paillier "github.com/taurusgroup/cmp-ecdsa/pkg/paillier"
	mod "github.com/taurusgroup/cmp-ecdsa/pkg/zk/mod"
	prm "github.com/taurusgroup/cmp-ecdsa/pkg/zk/prm"
	sch "github.com/taurusgroup/cmp-ecdsa/pkg/zk/sch"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Keygen2 struct {
	// Commitment = Vᵢ = H(ρᵢ, Fᵢ(X), Aᵢ, Nᵢ, sᵢ, tᵢ, uᵢ)
	Commitment github_com_taurusgroup_cmp_ecdsa_pkg_hash.Commitment `protobuf:"bytes,1,opt,name=Commitment,proto3,casttype=github.com/taurusgroup/cmp-ecdsa/pkg/hash.Commitment" json:"Commitment,omitempty"`
}

func (m *Keygen2) Reset()         { *m = Keygen2{} }
func (m *Keygen2) String() string { return proto.CompactTextString(m) }
func (*Keygen2) ProtoMessage()    {}
func (*Keygen2) Descriptor() ([]byte, []int) {
	return fileDescriptor_2448195f4f81478f, []int{0}
}
func (m *Keygen2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Keygen2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen2.Merge(m, src)
}
func (m *Keygen2) XXX_Size() int {
	return m.Size()
}
func (m *Keygen2) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen2.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen2 proto.InternalMessageInfo

type Keygen3 struct {
	// HashEcho = H(V₁, …, Vₙ)
	// This is essentially an echo of all messages from Keygen2.
	// If one party received something different then everybody must abort.
	HashEcho []byte `protobuf:"bytes,1,opt,name=HashEcho,proto3" json:"HashEcho,omitempty"`
}

func (m *Keygen3) Reset()         { *m = Keygen3{} }
func (m *Keygen3) String() string { return proto.CompactTextString(m) }
func (*Keygen3) ProtoMessage()    {}
func (*Keygen3) Descriptor() ([]byte, []int) {
	return fileDescriptor_2448195f4f81478f, []int{1}
}
func (m *Keygen3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Keygen3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen3.Merge(m, src)
}
func (m *Keygen3) XXX_Size() int {
	return m.Size()
}
func (m *Keygen3) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen3.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen3 proto.InternalMessageInfo

type Keygen4 struct {
	// RID = RIDᵢ
	RID RID `protobuf:"bytes,1,opt,name=RID,proto3,casttype=RID" json:"RID,omitempty"`
	// VSSPolynomial = Fᵢ(X) VSSPolynomial
	VSSPolynomial *polynomial.Exponent `protobuf:"bytes,2,opt,name=VSSPolynomial,proto3" json:"VSSPolynomial,omitempty"`
	// SchnorrCommitments = Aᵢ Schnorr commitment for the final confirmation
	SchnorrCommitments *sch.Commitment `protobuf:"bytes,3,opt,name=SchnorrCommitments,proto3" json:"SchnorrCommitments,omitempty"`
	// N Paillier and Pedersen N = p•q, p ≡ q ≡ 3 mod 4
	N *math_big.Int `protobuf:"bytes,4,opt,name=N,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/internal/proto.IntCaster" json:"N,omitempty"`
	// S = r² mod N
	S *math_big.Int `protobuf:"bytes,5,opt,name=S,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/internal/proto.IntCaster" json:"S,omitempty"`
	// T = Sˡ mod N
	T *math_big.Int `protobuf:"bytes,6,opt,name=T,proto3,casttypewith=math/big.Int;github.com/taurusgroup/cmp-ecdsa/internal/proto.IntCaster" json:"T,omitempty"`
	// Decommitment = uᵢ decommitment bytes
	Decommitment github_com_taurusgroup_cmp_ecdsa_pkg_hash.Decommitment `protobuf:"bytes,7,opt,name=Decommitment,proto3,casttype=github.com/taurusgroup/cmp-ecdsa/pkg/hash.Decommitment" json:"Decommitment,omitempty"`
}

func (m *Keygen4) Reset()         { *m = Keygen4{} }
func (m *Keygen4) String() string { return proto.CompactTextString(m) }
func (*Keygen4) ProtoMessage()    {}
func (*Keygen4) Descriptor() ([]byte, []int) {
	return fileDescriptor_2448195f4f81478f, []int{2}
}
func (m *Keygen4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Keygen4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen4.Merge(m, src)
}
func (m *Keygen4) XXX_Size() int {
	return m.Size()
}
func (m *Keygen4) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen4.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen4 proto.InternalMessageInfo

type Keygen5 struct {
	Mod *mod.Proof `protobuf:"bytes,1,opt,name=Mod,proto3" json:"Mod,omitempty"`
	Prm *prm.Proof `protobuf:"bytes,2,opt,name=Prm,proto3" json:"Prm,omitempty"`
	// Share = Encᵢ(x) is the encryption of the receivers share
	Share *paillier.Ciphertext `protobuf:"bytes,3,opt,name=Share,proto3" json:"Share,omitempty"`
}

func (m *Keygen5) Reset()         { *m = Keygen5{} }
func (m *Keygen5) String() string { return proto.CompactTextString(m) }
func (*Keygen5) ProtoMessage()    {}
func (*Keygen5) Descriptor() ([]byte, []int) {
	return fileDescriptor_2448195f4f81478f, []int{3}
}
func (m *Keygen5) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen5) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Keygen5) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen5.Merge(m, src)
}
func (m *Keygen5) XXX_Size() int {
	return m.Size()
}
func (m *Keygen5) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen5.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen5 proto.InternalMessageInfo

type KeygenOutput struct {
	// Proof is the Schnorr proof of knowledge of the new secret share
	SchnorrResponse *sch.Response `protobuf:"bytes,1,opt,name=SchnorrResponse,proto3" json:"SchnorrResponse,omitempty"`
}

func (m *KeygenOutput) Reset()         { *m = KeygenOutput{} }
func (m *KeygenOutput) String() string { return proto.CompactTextString(m) }
func (*KeygenOutput) ProtoMessage()    {}
func (*KeygenOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2448195f4f81478f, []int{4}
}
func (m *KeygenOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeygenOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenOutput.Merge(m, src)
}
func (m *KeygenOutput) XXX_Size() int {
	return m.Size()
}
func (m *KeygenOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenOutput.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenOutput proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Keygen2)(nil), "keygen.Keygen2")
	proto.RegisterType((*Keygen3)(nil), "keygen.Keygen3")
	proto.RegisterType((*Keygen4)(nil), "keygen.Keygen4")
	proto.RegisterType((*Keygen5)(nil), "keygen.Keygen5")
	proto.RegisterType((*KeygenOutput)(nil), "keygen.KeygenOutput")
}

func init() {
	proto.RegisterFile("protocols/cmp/keygen/message.proto", fileDescriptor_2448195f4f81478f)
}

var fileDescriptor_2448195f4f81478f = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x69, 0x9a, 0xa0, 0x6b, 0x50, 0xc5, 0x29, 0x83, 0x89, 0x84, 0x53, 0x65, 0xaa, 0x40,
	0xb5, 0xa5, 0xb4, 0x20, 0x08, 0x13, 0x4d, 0x8b, 0x28, 0x88, 0x36, 0x3a, 0x57, 0xa8, 0x62, 0x40,
	0x72, 0x9c, 0xab, 0x6d, 0xc5, 0xe7, 0xb3, 0xee, 0xce, 0x52, 0x1b, 0xfe, 0x00, 0x23, 0x1b, 0x2b,
	0x33, 0xbf, 0x84, 0xb1, 0x63, 0xa7, 0x80, 0x92, 0x7f, 0x91, 0x09, 0xdd, 0xf9, 0x9c, 0xa4, 0x11,
	0x12, 0x1d, 0x3a, 0x5c, 0x94, 0xf7, 0xbe, 0xef, 0xbe, 0xf7, 0xfc, 0xfc, 0x3d, 0x83, 0x56, 0xca,
	0xa8, 0xa0, 0x3e, 0x8d, 0xb9, 0xe3, 0x93, 0xd4, 0x19, 0xe2, 0xcb, 0x00, 0x27, 0x0e, 0xc1, 0x9c,
	0x7b, 0x01, 0xb6, 0x15, 0x08, 0x2b, 0x79, 0xb6, 0xb1, 0x13, 0x44, 0x22, 0xcc, 0xfa, 0xb6, 0x4f,
	0x89, 0x13, 0xd0, 0x80, 0x3a, 0x0a, 0xee, 0x67, 0xe7, 0x2a, 0x52, 0x81, 0xfa, 0x97, 0x5f, 0x6b,
	0x3c, 0x4e, 0x87, 0x81, 0x93, 0x7a, 0x51, 0x1c, 0x47, 0x98, 0x39, 0x7e, 0x94, 0x86, 0x98, 0x09,
	0x7c, 0x21, 0x34, 0xdc, 0x92, 0x30, 0xf1, 0x44, 0xe8, 0xa4, 0x34, 0xbe, 0x4c, 0x28, 0x89, 0xbc,
	0xd8, 0xc1, 0x17, 0x29, 0x4d, 0x70, 0x52, 0x70, 0xea, 0x92, 0x33, 0x1a, 0x3a, 0x84, 0x0e, 0xe4,
	0x59, 0xc9, 0xa6, 0x8c, 0xc8, 0xb3, 0x92, 0xe5, 0x7e, 0x28, 0x4f, 0x9e, 0x6d, 0x45, 0xa0, 0xfa,
	0x5e, 0x75, 0xdf, 0x86, 0x67, 0x00, 0x74, 0x29, 0x21, 0x91, 0x20, 0x38, 0x11, 0xa6, 0xb1, 0x65,
	0x6c, 0xd7, 0xf6, 0x5f, 0xcc, 0xc6, 0xcd, 0xbd, 0xa5, 0xc7, 0x12, 0x5e, 0xc6, 0x32, 0x1e, 0x30,
	0x9a, 0xa5, 0x72, 0x1e, 0x3b, 0xd8, 0x1f, 0x70, 0xcf, 0x91, 0xca, 0xa1, 0xc7, 0x43, 0x7b, 0x71,
	0x1f, 0x2d, 0x69, 0x75, 0xca, 0x5f, 0x7f, 0x34, 0x4b, 0xad, 0xa7, 0x45, 0xa9, 0x5d, 0xd8, 0x00,
	0xf7, 0xdf, 0x7a, 0x3c, 0x3c, 0xf4, 0x43, 0x9a, 0x17, 0x42, 0xf3, 0x58, 0x93, 0xbf, 0x97, 0x0b,
	0xf6, 0x1e, 0x7c, 0x04, 0xd6, 0xd0, 0xd1, 0x81, 0xee, 0xa8, 0x3a, 0x1b, 0x37, 0x65, 0x88, 0xe4,
	0x0f, 0xec, 0x80, 0x07, 0x1f, 0x5d, 0xb7, 0x37, 0x1f, 0x90, 0x79, 0x6f, 0xcb, 0xd8, 0xde, 0x68,
	0xd7, 0xed, 0xc5, 0xcc, 0xec, 0x43, 0x3d, 0x33, 0x74, 0x93, 0x0a, 0x5f, 0x03, 0xe8, 0xfa, 0x61,
	0x42, 0x19, 0x5b, 0xb4, 0xca, 0xcd, 0x35, 0x25, 0xf0, 0xd0, 0x1e, 0x0d, 0xe5, 0x90, 0x96, 0x1e,
	0xe8, 0x1f, 0x64, 0x78, 0x06, 0x8c, 0x63, 0xb3, 0xac, 0xfa, 0x7a, 0xf7, 0xf3, 0x77, 0xf3, 0x8d,
	0x7a, 0x5d, 0xfd, 0x28, 0xb0, 0x8f, 0x12, 0xf1, 0xea, 0xbf, 0x63, 0x8b, 0x12, 0x81, 0x59, 0xe2,
	0xc5, 0xb9, 0x4f, 0xe4, 0x9d, 0xae, 0xc7, 0x05, 0x66, 0xc8, 0x38, 0x96, 0xca, 0xae, 0xb9, 0x7e,
	0xf7, 0xca, 0xae, 0x54, 0x3e, 0x35, 0x2b, 0x77, 0xaf, 0x7c, 0x0a, 0x3f, 0x83, 0xda, 0x01, 0xf6,
	0x17, 0x16, 0xaa, 0xaa, 0x22, 0x9d, 0xd9, 0xb8, 0xf9, 0xfc, 0xf6, 0x16, 0x5a, 0x56, 0x40, 0x37,
	0xf4, 0xb4, 0x33, 0xbe, 0x14, 0xc6, 0x78, 0x06, 0x2d, 0xb0, 0xf6, 0x81, 0x0e, 0x94, 0x31, 0x36,
	0xda, 0x35, 0x7b, 0x34, 0x94, 0x3b, 0xd0, 0x63, 0x94, 0x9e, 0x23, 0x09, 0x48, 0xbc, 0xc7, 0x88,
	0xf6, 0x84, 0xc4, 0xe5, 0x36, 0x68, 0xbc, 0xc7, 0x08, 0x7c, 0x02, 0xd6, 0xdd, 0xd0, 0x63, 0x58,
	0xbf, 0xf4, 0xba, 0x5d, 0x6c, 0xa3, 0xdd, 0x9d, 0x6f, 0x23, 0xca, 0x29, 0xba, 0xf8, 0x09, 0xa8,
	0xe5, 0xc5, 0x4f, 0x32, 0x91, 0x66, 0x02, 0xbe, 0x04, 0x9b, 0xda, 0x16, 0x08, 0xf3, 0x94, 0x26,
	0x1c, 0xeb, 0x6e, 0x36, 0xb5, 0x81, 0x8a, 0x34, 0x5a, 0xe5, 0xe5, 0x82, 0xfb, 0xe8, 0xd7, 0xc4,
	0x32, 0xae, 0x26, 0x96, 0x71, 0x3d, 0xb1, 0x8c, 0x3f, 0x13, 0xcb, 0xf8, 0x36, 0xb5, 0x4a, 0x57,
	0x53, 0xab, 0x74, 0x3d, 0xb5, 0x4a, 0x9f, 0x6e, 0xb1, 0x7a, 0xfa, 0xf3, 0xb4, 0xf4, 0x75, 0xea,
	0x57, 0x54, 0x72, 0xf7, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0xef, 0x66, 0x9f, 0xbc, 0x04,
	0x00, 0x00,
}

func (m *Keygen2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keygen3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashEcho) > 0 {
		i -= len(m.HashEcho)
		copy(dAtA[i:], m.HashEcho)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HashEcho)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keygen4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decommitment) > 0 {
		i -= len(m.Decommitment)
		copy(dAtA[i:], m.Decommitment)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Decommitment)))
		i--
		dAtA[i] = 0x3a
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
		size := __caster.Size(m.T)
		i -= size
		if _, err := __caster.MarshalTo(m.T, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
		size := __caster.Size(m.S)
		i -= size
		if _, err := __caster.MarshalTo(m.S, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
		size := __caster.Size(m.N)
		i -= size
		if _, err := __caster.MarshalTo(m.N, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.SchnorrCommitments != nil {
		{
			size, err := m.SchnorrCommitments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VSSPolynomial != nil {
		{
			size, err := m.VSSPolynomial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RID) > 0 {
		i -= len(m.RID)
		copy(dAtA[i:], m.RID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keygen5) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen5) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen5) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Share != nil {
		{
			size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Prm != nil {
		{
			size, err := m.Prm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mod != nil {
		{
			size, err := m.Mod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchnorrResponse != nil {
		{
			size, err := m.SchnorrResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Keygen2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Keygen3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashEcho)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Keygen4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.VSSPolynomial != nil {
		l = m.VSSPolynomial.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SchnorrCommitments != nil {
		l = m.SchnorrCommitments.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
		l = __caster.Size(m.N)
		n += 1 + l + sovMessage(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
		l = __caster.Size(m.S)
		n += 1 + l + sovMessage(uint64(l))
	}
	{
		__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
		l = __caster.Size(m.T)
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Decommitment)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Keygen5) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mod != nil {
		l = m.Mod.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Prm != nil {
		l = m.Prm.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Share != nil {
		l = m.Share.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *KeygenOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchnorrResponse != nil {
		l = m.SchnorrResponse.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Keygen2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keygen2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keygen2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keygen3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keygen3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keygen3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashEcho", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashEcho = append(m.HashEcho[:0], dAtA[iNdEx:postIndex]...)
			if m.HashEcho == nil {
				m.HashEcho = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keygen4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keygen4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keygen4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RID = append(m.RID[:0], dAtA[iNdEx:postIndex]...)
			if m.RID == nil {
				m.RID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VSSPolynomial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VSSPolynomial == nil {
				m.VSSPolynomial = &polynomial.Exponent{}
			}
			if err := m.VSSPolynomial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchnorrCommitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchnorrCommitments == nil {
				m.SchnorrCommitments = &sch.Commitment{}
			}
			if err := m.SchnorrCommitments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.N = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.S = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_taurusgroup_cmp_ecdsa_internal_proto.IntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.T = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decommitment = append(m.Decommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Decommitment == nil {
				m.Decommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keygen5) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keygen5: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keygen5: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mod == nil {
				m.Mod = &mod.Proof{}
			}
			if err := m.Mod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prm == nil {
				m.Prm = &prm.Proof{}
			}
			if err := m.Prm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Share == nil {
				m.Share = &paillier.Ciphertext{}
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchnorrResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchnorrResponse == nil {
				m.SchnorrResponse = &sch.Response{}
			}
			if err := m.SchnorrResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

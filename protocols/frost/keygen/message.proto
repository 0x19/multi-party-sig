syntax = "proto3";

package keygen;

option go_package = "github.com/taurusgroup/cmp-ecdsa/protocols/frost/keygen";

option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "pkg/math/polynomial/exponent.proto";

message Keygen2 {
  option (gogoproto.goproto_getters) = false;
  // Phi_i is the commitment to the polynomial that this participant generated.
  polynomial.Exponent Phi_i = 1 [(gogoproto.customname) = "Phi_i"];
  // R_i is the first part of the Schnorr proof of knowledge of the participant's secret
  bytes R_i = 2 [(gogoproto.customtype) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point", (gogoproto.customname) = "R_i"];
  // Mu_i is the second part of the Schnorr proof of knowledge of the participant's secret
  bytes Mu_i = 3 [(gogoproto.customtype) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Scalar", (gogoproto.customname) = "Mu_i"];
}

message Keygen3 {
  option (gogoproto.goproto_getters) = false;
  // F_li is the secret share sent from party l to this party.
  bytes F_li = 1 [(gogoproto.customtype) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Scalar", (gogoproto.customname) = "F_li"];
}

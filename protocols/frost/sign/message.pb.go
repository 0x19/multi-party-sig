// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/frost/sign/message.proto

package sign

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_pkg_math_curve "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sign2 struct {
	// D_i is the first commitment produced by the sender of this message.
	D_i *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point `protobuf:"bytes,1,opt,name=D_i,json=DI,proto3,customtype=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point" json:"D_i,omitempty"`
	// E_i is the second commitment produced by the sender of this message.
	E_i *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point `protobuf:"bytes,2,opt,name=E_i,json=EI,proto3,customtype=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point" json:"E_i,omitempty"`
}

func (m *Sign2) Reset()         { *m = Sign2{} }
func (m *Sign2) String() string { return proto.CompactTextString(m) }
func (*Sign2) ProtoMessage()    {}
func (*Sign2) Descriptor() ([]byte, []int) {
	return fileDescriptor_347b41c3fab22b06, []int{0}
}
func (m *Sign2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sign2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Sign2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sign2.Merge(m, src)
}
func (m *Sign2) XXX_Size() int {
	return m.Size()
}
func (m *Sign2) XXX_DiscardUnknown() {
	xxx_messageInfo_Sign2.DiscardUnknown(m)
}

var xxx_messageInfo_Sign2 proto.InternalMessageInfo

type Sign3 struct {
	// z_i is the response scalar computed by the sender of this message.
	z_i *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Scalar `protobuf:"bytes,1,opt,name=z_i,json=zI,proto3,customtype=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Scalar" json:"z_i,omitempty"`
}

func (m *Sign3) Reset()         { *m = Sign3{} }
func (m *Sign3) String() string { return proto.CompactTextString(m) }
func (*Sign3) ProtoMessage()    {}
func (*Sign3) Descriptor() ([]byte, []int) {
	return fileDescriptor_347b41c3fab22b06, []int{1}
}
func (m *Sign3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sign3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Sign3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sign3.Merge(m, src)
}
func (m *Sign3) XXX_Size() int {
	return m.Size()
}
func (m *Sign3) XXX_DiscardUnknown() {
	xxx_messageInfo_Sign3.DiscardUnknown(m)
}

var xxx_messageInfo_Sign3 proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Sign2)(nil), "keygen.Sign2")
	proto.RegisterType((*Sign3)(nil), "keygen.Sign3")
}

func init() {
	proto.RegisterFile("protocols/frost/sign/message.proto", fileDescriptor_347b41c3fab22b06)
}

var fileDescriptor_347b41c3fab22b06 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0x29, 0xd6, 0x4f, 0x2b, 0xca, 0x2f, 0x2e, 0xd1, 0x2f, 0xce, 0x4c, 0xcf,
	0xd3, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x03, 0x4b, 0x0a, 0xb1, 0x65, 0xa7, 0x56,
	0xa6, 0xa7, 0xe6, 0x49, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea,
	0xa7, 0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0xa5, 0x93, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82,
	0x68, 0x53, 0xda, 0xcc, 0xc8, 0xc5, 0x1a, 0x9c, 0x99, 0x9e, 0x67, 0x24, 0x14, 0xc8, 0xc5, 0xec,
	0x12, 0x9f, 0x29, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe3, 0xe4, 0x70, 0xeb, 0x9e, 0xbc, 0x29, 0x92,
	0x49, 0x25, 0x89, 0xa5, 0x45, 0xa5, 0xc5, 0xe9, 0x45, 0xf9, 0xa5, 0x05, 0xfa, 0xc9, 0xb9, 0x05,
	0xba, 0xa9, 0xc9, 0x29, 0xc5, 0x89, 0xfa, 0x05, 0xd9, 0xe9, 0xfa, 0xb9, 0x89, 0x25, 0x19, 0xfa,
	0xc9, 0xa5, 0x45, 0x65, 0xa9, 0x7a, 0x01, 0xf9, 0x99, 0x79, 0x25, 0x8f, 0xee, 0xc9, 0x83, 0xcc,
	0x09, 0x62, 0x72, 0xf1, 0x04, 0x19, 0xe9, 0x1a, 0x9f, 0x29, 0xc1, 0x44, 0x05, 0x23, 0x5d, 0x41,
	0x46, 0xba, 0x7a, 0x5a, 0xb1, 0x74, 0x2c, 0x90, 0x67, 0x50, 0x4a, 0x84, 0x38, 0xda, 0x58, 0x28,
	0x88, 0x8b, 0xb9, 0x0a, 0xee, 0x68, 0xc7, 0x5b, 0xf7, 0xe4, 0xcd, 0x48, 0xb5, 0x21, 0x38, 0x39,
	0x31, 0x27, 0xb1, 0x08, 0x64, 0x45, 0x15, 0xc8, 0x8a, 0x2a, 0xa8, 0x15, 0x4e, 0xc1, 0x27, 0x1e,
	0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0x78, 0xe3, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13,
	0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x11, 0x1e, 0xc1,
	0x12, 0x65, 0x49, 0x6c, 0x60, 0x51, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x1c, 0xf9,
	0x60, 0xd1, 0x01, 0x00, 0x00,
}

func (m *Sign2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sign2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sign2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.E_i != nil {
		{
			size := m.E_i.Size()
			i -= size
			if _, err := m.E_i.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.D_i != nil {
		{
			size := m.D_i.Size()
			i -= size
			if _, err := m.D_i.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sign3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sign3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sign3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.z_i != nil {
		{
			size := m.z_i.Size()
			i -= size
			if _, err := m.z_i.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sign2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.D_i != nil {
		l = m.D_i.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.E_i != nil {
		l = m.E_i.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Sign3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.z_i != nil {
		l = m.z_i.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sign2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sign2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sign2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D_i", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point
			m.D_i = &v
			if err := m.D_i.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E_i", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point
			m.E_i = &v
			if err := m.E_i.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sign3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sign3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sign3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field z_i", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Scalar
			m.z_i = &v
			if err := m.z_i.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/refresh/message.proto

package refresh

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_taurusgroup_cmp_ecdsa_pkg_math_curve "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve"
	polynomial "github.com/taurusgroup/cmp-ecdsa/pkg/math/polynomial"
	paillier "github.com/taurusgroup/cmp-ecdsa/pkg/paillier"
	pedersen "github.com/taurusgroup/cmp-ecdsa/pkg/pedersen"
	round "github.com/taurusgroup/cmp-ecdsa/pkg/round"
	mod "github.com/taurusgroup/cmp-ecdsa/pkg/zk/mod"
	prm "github.com/taurusgroup/cmp-ecdsa/pkg/zk/prm"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Header *round.Header `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Message_Refresh1
	//	*Message_Refresh2
	//	*Message_Refresh3
	//	*Message_Refresh4
	//	*Message_Refresh5
	Content isMessage_Content `protobuf_oneof:"Content"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c6bcf991e71965e, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Content interface {
	isMessage_Content()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Refresh1 struct {
	Refresh1 *Refresh1 `protobuf:"bytes,2,opt,name=refresh1,proto3,oneof" json:"refresh1,omitempty"`
}
type Message_Refresh2 struct {
	Refresh2 *Refresh2 `protobuf:"bytes,3,opt,name=refresh2,proto3,oneof" json:"refresh2,omitempty"`
}
type Message_Refresh3 struct {
	Refresh3 *Refresh3 `protobuf:"bytes,4,opt,name=refresh3,proto3,oneof" json:"refresh3,omitempty"`
}
type Message_Refresh4 struct {
	Refresh4 *Refresh4 `protobuf:"bytes,5,opt,name=refresh4,proto3,oneof" json:"refresh4,omitempty"`
}
type Message_Refresh5 struct {
	Refresh5 *Refresh5 `protobuf:"bytes,6,opt,name=refresh5,proto3,oneof" json:"refresh5,omitempty"`
}

func (*Message_Refresh1) isMessage_Content() {}
func (*Message_Refresh2) isMessage_Content() {}
func (*Message_Refresh3) isMessage_Content() {}
func (*Message_Refresh4) isMessage_Content() {}
func (*Message_Refresh5) isMessage_Content() {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetHeader() *round.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Message) GetRefresh1() *Refresh1 {
	if x, ok := m.GetContent().(*Message_Refresh1); ok {
		return x.Refresh1
	}
	return nil
}

func (m *Message) GetRefresh2() *Refresh2 {
	if x, ok := m.GetContent().(*Message_Refresh2); ok {
		return x.Refresh2
	}
	return nil
}

func (m *Message) GetRefresh3() *Refresh3 {
	if x, ok := m.GetContent().(*Message_Refresh3); ok {
		return x.Refresh3
	}
	return nil
}

func (m *Message) GetRefresh4() *Refresh4 {
	if x, ok := m.GetContent().(*Message_Refresh4); ok {
		return x.Refresh4
	}
	return nil
}

func (m *Message) GetRefresh5() *Refresh5 {
	if x, ok := m.GetContent().(*Message_Refresh5); ok {
		return x.Refresh5
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Refresh1)(nil),
		(*Message_Refresh2)(nil),
		(*Message_Refresh3)(nil),
		(*Message_Refresh4)(nil),
		(*Message_Refresh5)(nil),
	}
}

type Refresh1 struct {
	// Commitment = Vᵢ = H(ρᵢ, Fᵢ(X), Aᵢ, Nᵢ, sᵢ, tᵢ, uᵢ)
	Commitment []byte `protobuf:"bytes,1,opt,name=Commitment,proto3" json:"Commitment,omitempty"`
}

func (m *Refresh1) Reset()         { *m = Refresh1{} }
func (m *Refresh1) String() string { return proto.CompactTextString(m) }
func (*Refresh1) ProtoMessage()    {}
func (*Refresh1) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c6bcf991e71965e, []int{1}
}
func (m *Refresh1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Refresh1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Refresh1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refresh1.Merge(m, src)
}
func (m *Refresh1) XXX_Size() int {
	return m.Size()
}
func (m *Refresh1) XXX_DiscardUnknown() {
	xxx_messageInfo_Refresh1.DiscardUnknown(m)
}

var xxx_messageInfo_Refresh1 proto.InternalMessageInfo

type Refresh2 struct {
	// HashEcho = H(V₁, …, Vₙ)
	// This is essentially an echo of all messages from Refresh1.
	// If one party received something different then everybody must abort.
	HashEcho []byte `protobuf:"bytes,1,opt,name=HashEcho,proto3" json:"HashEcho,omitempty"`
}

func (m *Refresh2) Reset()         { *m = Refresh2{} }
func (m *Refresh2) String() string { return proto.CompactTextString(m) }
func (*Refresh2) ProtoMessage()    {}
func (*Refresh2) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c6bcf991e71965e, []int{2}
}
func (m *Refresh2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Refresh2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Refresh2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refresh2.Merge(m, src)
}
func (m *Refresh2) XXX_Size() int {
	return m.Size()
}
func (m *Refresh2) XXX_DiscardUnknown() {
	xxx_messageInfo_Refresh2.DiscardUnknown(m)
}

var xxx_messageInfo_Refresh2 proto.InternalMessageInfo

type Refresh3 struct {
	// Rho = ρᵢ
	Rho []byte `protobuf:"bytes,1,opt,name=Rho,proto3" json:"Rho,omitempty"`
	// VSSPolynomial = Fᵢ(X) VSSPolynomial
	VSSPolynomial *polynomial.Exponent `protobuf:"bytes,2,opt,name=VSSPolynomial,proto3" json:"VSSPolynomial,omitempty"`
	// SchnorrCommitments = Aᵢ Schnorr commitment for the final confirmation
	SchnorrCommitments *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point `protobuf:"bytes,3,opt,name=SchnorrCommitments,proto3,customtype=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point" json:"SchnorrCommitments,omitempty"`
	// N Paillier and Pedersen
	Pedersen *pedersen.Parameters `protobuf:"bytes,4,opt,name=Pedersen,proto3" json:"Pedersen,omitempty"`
	// Decommitment = uᵢ decommitment bytes
	Decommitment []byte `protobuf:"bytes,5,opt,name=Decommitment,proto3" json:"Decommitment,omitempty"`
}

func (m *Refresh3) Reset()         { *m = Refresh3{} }
func (m *Refresh3) String() string { return proto.CompactTextString(m) }
func (*Refresh3) ProtoMessage()    {}
func (*Refresh3) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c6bcf991e71965e, []int{3}
}
func (m *Refresh3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Refresh3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Refresh3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refresh3.Merge(m, src)
}
func (m *Refresh3) XXX_Size() int {
	return m.Size()
}
func (m *Refresh3) XXX_DiscardUnknown() {
	xxx_messageInfo_Refresh3.DiscardUnknown(m)
}

var xxx_messageInfo_Refresh3 proto.InternalMessageInfo

type Refresh4 struct {
	Mod *mod.Proof `protobuf:"bytes,1,opt,name=Mod,proto3" json:"Mod,omitempty"`
	Prm *prm.Proof `protobuf:"bytes,2,opt,name=Prm,proto3" json:"Prm,omitempty"`
	// Share = Encᵢ(x) is the encryption of the receivers share
	Share *paillier.Ciphertext `protobuf:"bytes,3,opt,name=Share,proto3" json:"Share,omitempty"`
}

func (m *Refresh4) Reset()         { *m = Refresh4{} }
func (m *Refresh4) String() string { return proto.CompactTextString(m) }
func (*Refresh4) ProtoMessage()    {}
func (*Refresh4) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c6bcf991e71965e, []int{4}
}
func (m *Refresh4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Refresh4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Refresh4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refresh4.Merge(m, src)
}
func (m *Refresh4) XXX_Size() int {
	return m.Size()
}
func (m *Refresh4) XXX_DiscardUnknown() {
	xxx_messageInfo_Refresh4.DiscardUnknown(m)
}

var xxx_messageInfo_Refresh4 proto.InternalMessageInfo

type Refresh5 struct {
	// Proof is the Schnorr proof of knowledge of the new secret share
	Proof *github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Scalar `protobuf:"bytes,1,opt,name=Proof,proto3,customtype=github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Scalar" json:"Proof,omitempty"`
}

func (m *Refresh5) Reset()         { *m = Refresh5{} }
func (m *Refresh5) String() string { return proto.CompactTextString(m) }
func (*Refresh5) ProtoMessage()    {}
func (*Refresh5) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c6bcf991e71965e, []int{5}
}
func (m *Refresh5) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Refresh5) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Refresh5) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refresh5.Merge(m, src)
}
func (m *Refresh5) XXX_Size() int {
	return m.Size()
}
func (m *Refresh5) XXX_DiscardUnknown() {
	xxx_messageInfo_Refresh5.DiscardUnknown(m)
}

var xxx_messageInfo_Refresh5 proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Message)(nil), "refresh.Message")
	proto.RegisterType((*Refresh1)(nil), "refresh.Refresh1")
	proto.RegisterType((*Refresh2)(nil), "refresh.Refresh2")
	proto.RegisterType((*Refresh3)(nil), "refresh.Refresh3")
	proto.RegisterType((*Refresh4)(nil), "refresh.Refresh4")
	proto.RegisterType((*Refresh5)(nil), "refresh.Refresh5")
}

func init() { proto.RegisterFile("protocols/refresh/message.proto", fileDescriptor_9c6bcf991e71965e) }

var fileDescriptor_9c6bcf991e71965e = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6a, 0xdb, 0x30,
	0x1c, 0x8f, 0xdb, 0xa6, 0xcd, 0xb4, 0x14, 0x36, 0x11, 0x98, 0xe9, 0x98, 0x33, 0x02, 0x83, 0x31,
	0x56, 0xa9, 0xcd, 0xc7, 0x60, 0x3d, 0xa6, 0x2b, 0xf4, 0x52, 0x66, 0x1c, 0xd8, 0x61, 0x37, 0xc5,
	0x56, 0x6d, 0x13, 0xcb, 0x32, 0xb2, 0x3c, 0xba, 0xb2, 0x07, 0xd8, 0x71, 0x6f, 0xb0, 0x3d, 0xc2,
	0x1e, 0x63, 0xc7, 0x1e, 0x4b, 0x0f, 0x65, 0x24, 0x2f, 0x32, 0x2c, 0x2b, 0x8a, 0x33, 0x02, 0x63,
	0x07, 0x83, 0xf4, 0xfb, 0xd0, 0xdf, 0xfa, 0xeb, 0x27, 0x81, 0x6e, 0x26, 0xb8, 0xe4, 0x3e, 0x4f,
	0x72, 0x2c, 0xe8, 0xa5, 0xa0, 0x79, 0x84, 0x19, 0xcd, 0x73, 0x12, 0x52, 0xa4, 0x18, 0xb8, 0xa7,
	0xe1, 0x83, 0xc3, 0x30, 0x96, 0x51, 0x31, 0x45, 0x3e, 0x67, 0x38, 0xe4, 0x21, 0xc7, 0x8a, 0x9f,
	0x16, 0x97, 0x6a, 0xa6, 0x26, 0x6a, 0x54, 0xf9, 0x0e, 0x9e, 0x65, 0xb3, 0x10, 0x67, 0x24, 0x4e,
	0x92, 0x98, 0x0a, 0xec, 0xc7, 0x59, 0x44, 0x85, 0xa4, 0x57, 0x52, 0xd3, 0xbd, 0x92, 0x66, 0x44,
	0x46, 0x38, 0xe3, 0xc9, 0xe7, 0x94, 0xb3, 0x98, 0x24, 0x98, 0x5e, 0x65, 0x3c, 0xa5, 0xe9, 0x52,
	0xd3, 0x29, 0x35, 0xd7, 0x33, 0xcc, 0x78, 0x50, 0x7e, 0x7f, 0xa1, 0x99, 0x60, 0xe5, 0xa7, 0xd1,
	0xa7, 0xaa, 0x1c, 0x0d, 0xa8, 0xc8, 0x69, 0x6a, 0x06, 0x9a, 0x7c, 0x52, 0x92, 0x82, 0x17, 0x69,
	0xb0, 0xbe, 0xb9, 0xde, 0xcf, 0x2d, 0xb0, 0x77, 0x51, 0x21, 0xf0, 0x05, 0xd8, 0x3d, 0xa7, 0x24,
	0xa0, 0xc2, 0xb6, 0x9e, 0x5b, 0x2f, 0x1f, 0xf6, 0xf7, 0x91, 0x72, 0xa0, 0x0a, 0xf4, 0x34, 0x09,
	0x31, 0x68, 0xe9, 0x8e, 0x1c, 0xdb, 0x5b, 0x4a, 0xf8, 0x18, 0x69, 0x00, 0x79, 0x9a, 0x38, 0x6f,
	0x78, 0x46, 0x54, 0x33, 0xf4, 0xed, 0xed, 0xcd, 0x86, 0x7e, 0xcd, 0xd0, 0xaf, 0x19, 0x06, 0xf6,
	0xce, 0x66, 0xc3, 0xa0, 0x66, 0x18, 0xd4, 0x0c, 0x43, 0xbb, 0xb9, 0xd9, 0x30, 0xac, 0x19, 0x86,
	0x35, 0xc3, 0xc8, 0xde, 0xdd, 0x6c, 0x18, 0xd5, 0x0c, 0xa3, 0xf1, 0x03, 0xb0, 0x77, 0xca, 0x53,
	0x49, 0x53, 0xd9, 0x3b, 0x02, 0xad, 0xe5, 0x36, 0xa1, 0x03, 0xc0, 0x29, 0x67, 0x2c, 0x96, 0x8c,
	0xa6, 0x52, 0xb5, 0xad, 0xed, 0xd5, 0x90, 0x93, 0x9d, 0xaf, 0x3f, 0xba, 0x8d, 0xde, 0x6b, 0xe3,
	0xe8, 0xc3, 0x03, 0xd0, 0x3a, 0x27, 0x79, 0x74, 0xe6, 0x47, 0x5c, 0xeb, 0xcd, 0x5c, 0xab, 0xbf,
	0x6f, 0x19, 0xf9, 0x00, 0x3e, 0x02, 0xdb, 0x9e, 0x51, 0x96, 0x43, 0x78, 0x02, 0xf6, 0x3f, 0x4c,
	0x26, 0xae, 0xc9, 0x8c, 0x3e, 0x83, 0x0e, 0x5a, 0xc5, 0x08, 0x9d, 0xe9, 0x18, 0x79, 0xeb, 0x52,
	0x18, 0x03, 0x38, 0xf1, 0xa3, 0x94, 0x0b, 0xb1, 0xfa, 0xc7, 0x5c, 0x9d, 0x49, 0x7b, 0xfc, 0xf6,
	0xee, 0xbe, 0x3b, 0xaa, 0x25, 0x5c, 0x92, 0x42, 0x14, 0x79, 0x28, 0x78, 0x91, 0x61, 0x9f, 0x65,
	0x87, 0xd4, 0x0f, 0x72, 0x82, 0x4d, 0x68, 0xfd, 0x42, 0x7c, 0xa2, 0xc8, 0xe5, 0x71, 0x2a, 0xbd,
	0x0d, 0x8b, 0xc2, 0x23, 0xd0, 0x72, 0x75, 0x06, 0xf5, 0x19, 0x76, 0x90, 0x09, 0xa5, 0x4b, 0x04,
	0x61, 0x54, 0x52, 0x91, 0x7b, 0x46, 0x05, 0x7b, 0xa0, 0xfd, 0x8e, 0xfa, 0xab, 0x6e, 0x36, 0xd5,
	0x9e, 0xd7, 0x30, 0xdd, 0xa1, 0x2f, 0xa6, 0x41, 0x43, 0xe8, 0x80, 0xed, 0x0b, 0x1e, 0xe8, 0xc4,
	0xb6, 0xd1, 0xf5, 0xac, 0xbc, 0x27, 0xae, 0xe0, 0xfc, 0xd2, 0x2b, 0x89, 0x92, 0x77, 0x05, 0xd3,
	0x4d, 0x2a, 0xf9, 0xf2, 0xc6, 0x68, 0xde, 0x15, 0x0c, 0xbe, 0x02, 0xcd, 0x49, 0x44, 0x04, 0xd5,
	0xc9, 0xec, 0xa0, 0xe5, 0x8d, 0x45, 0xa7, 0xe6, 0xc6, 0x7a, 0x95, 0x44, 0x57, 0x9f, 0x9a, 0xea,
	0x23, 0xe8, 0x82, 0xa6, 0x5a, 0xab, 0x3a, 0xa0, 0xf1, 0xc9, 0xdd, 0x7d, 0xf7, 0xcd, 0xff, 0xf6,
	0x70, 0xe2, 0x93, 0x84, 0x08, 0xaf, 0x5a, 0xa8, 0xaa, 0x31, 0x7e, 0xff, 0x6b, 0xee, 0x58, 0x37,
	0x73, 0xc7, 0xba, 0x9d, 0x3b, 0xd6, 0xef, 0xb9, 0x63, 0x7d, 0x5b, 0x38, 0x8d, 0x9b, 0x85, 0xd3,
	0xb8, 0x5d, 0x38, 0x8d, 0x8f, 0xc7, 0xff, 0x2e, 0xa1, 0xdf, 0xb4, 0xe5, 0x93, 0x36, 0xdd, 0x55,
	0xc8, 0xe0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xa5, 0x94, 0x45, 0xee, 0x04, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size := m.Content.Size()
			i -= size
			if _, err := m.Content.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message_Refresh1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Refresh1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Refresh1 != nil {
		{
			size, err := m.Refresh1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_Refresh2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Refresh2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Refresh2 != nil {
		{
			size, err := m.Refresh2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Refresh3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Refresh3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Refresh3 != nil {
		{
			size, err := m.Refresh3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_Refresh4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Refresh4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Refresh4 != nil {
		{
			size, err := m.Refresh4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Refresh5) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Refresh5) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Refresh5 != nil {
		{
			size, err := m.Refresh5.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Refresh1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Refresh1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Refresh1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Refresh2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Refresh2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Refresh2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashEcho) > 0 {
		i -= len(m.HashEcho)
		copy(dAtA[i:], m.HashEcho)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HashEcho)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Refresh3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Refresh3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Refresh3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decommitment) > 0 {
		i -= len(m.Decommitment)
		copy(dAtA[i:], m.Decommitment)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Decommitment)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Pedersen != nil {
		{
			size, err := m.Pedersen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SchnorrCommitments != nil {
		{
			size := m.SchnorrCommitments.Size()
			i -= size
			if _, err := m.SchnorrCommitments.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VSSPolynomial != nil {
		{
			size, err := m.VSSPolynomial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rho) > 0 {
		i -= len(m.Rho)
		copy(dAtA[i:], m.Rho)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Rho)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Refresh4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Refresh4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Refresh4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Share != nil {
		{
			size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Prm != nil {
		{
			size, err := m.Prm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mod != nil {
		{
			size, err := m.Mod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Refresh5) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Refresh5) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Refresh5) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size := m.Proof.Size()
			i -= size
			if _, err := m.Proof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *Message_Refresh1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refresh1 != nil {
		l = m.Refresh1.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Refresh2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refresh2 != nil {
		l = m.Refresh2.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Refresh3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refresh3 != nil {
		l = m.Refresh3.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Refresh4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refresh4 != nil {
		l = m.Refresh4.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Refresh5) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refresh5 != nil {
		l = m.Refresh5.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Refresh1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Refresh2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashEcho)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Refresh3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rho)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.VSSPolynomial != nil {
		l = m.VSSPolynomial.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SchnorrCommitments != nil {
		l = m.SchnorrCommitments.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Pedersen != nil {
		l = m.Pedersen.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Decommitment)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Refresh4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mod != nil {
		l = m.Mod.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Prm != nil {
		l = m.Prm.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Share != nil {
		l = m.Share.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Refresh5) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &round.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Refresh1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Message_Refresh1{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Refresh2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Message_Refresh2{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Refresh3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Message_Refresh3{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Refresh4{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Message_Refresh4{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh5", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Refresh5{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Message_Refresh5{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Refresh1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refresh1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refresh1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Refresh2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refresh2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refresh2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashEcho", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashEcho = append(m.HashEcho[:0], dAtA[iNdEx:postIndex]...)
			if m.HashEcho == nil {
				m.HashEcho = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Refresh3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refresh3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refresh3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rho", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rho = append(m.Rho[:0], dAtA[iNdEx:postIndex]...)
			if m.Rho == nil {
				m.Rho = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VSSPolynomial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VSSPolynomial == nil {
				m.VSSPolynomial = &polynomial.Exponent{}
			}
			if err := m.VSSPolynomial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchnorrCommitments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Point
			m.SchnorrCommitments = &v
			if err := m.SchnorrCommitments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pedersen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pedersen == nil {
				m.Pedersen = &pedersen.Parameters{}
			}
			if err := m.Pedersen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decommitment = append(m.Decommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Decommitment == nil {
				m.Decommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Refresh4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refresh4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refresh4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mod == nil {
				m.Mod = &mod.Proof{}
			}
			if err := m.Mod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prm == nil {
				m.Prm = &prm.Proof{}
			}
			if err := m.Prm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Share == nil {
				m.Share = &paillier.Ciphertext{}
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Refresh5) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refresh5: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refresh5: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_taurusgroup_cmp_ecdsa_pkg_math_curve.Scalar
			m.Proof = &v
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

package refresh

import (
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/taurusgroup/cmp-ecdsa/pkg/hash"
	"github.com/taurusgroup/cmp-ecdsa/pkg/math/curve"
	"github.com/taurusgroup/cmp-ecdsa/pkg/math/polynomial"
	"github.com/taurusgroup/cmp-ecdsa/pkg/math/sample"
	"github.com/taurusgroup/cmp-ecdsa/pkg/paillier"
	"github.com/taurusgroup/cmp-ecdsa/pkg/params"
	"github.com/taurusgroup/cmp-ecdsa/pkg/party"
	"github.com/taurusgroup/cmp-ecdsa/pkg/round"
)

type round1 struct {
	*round.BaseRound

	Self         *LocalParty
	LocalParties map[party.ID]*LocalParty

	// PaillierSecret is the newly generated Paillier key
	PaillierSecret *paillier.SecretKey
	// PedersenSecret is Œª·µ¢ used to generate the Pedersen parameters
	PedersenSecret *big.Int

	// Decommitment of the 3rd message
	Decommitment hash.Decommitment // u·µ¢

	// VSSSecret is f·µ¢(X)
	VSSSecret *polynomial.Polynomial

	// SchnorrRand is an array to t+1 random a‚Çó ‚àà ùîΩ used to compute Schnorr commitments of
	// the coefficients of the exponent polynomial F·µ¢(X)
	SchnorrRand *curve.Scalar

	isDoingKeygen bool
}

// ProcessMessage implements round.Round
func (r *round1) ProcessMessage(round.Message) error {
	// In the first round, no messages are expected.
	return nil
}

// GenerateMessages implements round.Round
//
// - sample { a‚Çó }‚Çó  <- ùîΩ for l = 0, ‚Ä¶, t
// - set { A·µ¢ = a‚Çó‚ãÖG}‚Çó for l = 0, ‚Ä¶, t
// - sample Paillier p·µ¢, q·µ¢
// - sample Pedersen N·µ¢, S·µ¢, T·µ¢
// - sample f·µ¢(X) <- ùîΩ[X], deg(f·µ¢) = t
//   - if keygen, f·µ¢(0) = x·µ¢ (additive share of full ECDSA secret key)
//   - if refresh, f·µ¢(0) = 0
// - compute F·µ¢(X) = f·µ¢(X)‚ãÖG
// - sample rho·µ¢ <- {0,1}·µè
//   - if keygen, this is RID·µ¢
//   - if refresh, this is used to bind the zk proof to a random value
// - commit to message
func (r *round1) GenerateMessages() ([]round.Message, error) {
	var err error

	// generate Paillier and Pedersen
	skPaillier := paillier.NewSecretKey()
	r.Self.Public.Pedersen, r.PedersenSecret = skPaillier.GeneratePedersen()
	r.PaillierSecret = skPaillier
	r.Self.Public.Paillier = skPaillier.PublicKey

	// sample f·µ¢(X) deg(f·µ¢) = t, f·µ¢(0) = constant
	// if keygen then constant = secret, otherwise it is 0 (nil)
	var constant *curve.Scalar
	if r.isKeygen() {
		constant = sample.Scalar(rand.Reader)
	}
	r.VSSSecret = polynomial.NewPolynomial(r.S.Threshold(), constant)

	// save our own share already so we are consistent with what we receive from others
	r.Self.ShareReceived = r.VSSSecret.Evaluate(r.SelfID.Scalar())

	// set F·µ¢(X) = f·µ¢(X)‚Ä¢G
	r.Self.VSSPolynomial = polynomial.NewPolynomialExponent(r.VSSSecret)

	// generate Schnorr randomness and commitments
	r.SchnorrRand, r.Self.SchnorrCommitments = sample.ScalarPointPair(rand.Reader)

	// Sample œÅ·µ¢
	r.Self.Rho = make([]byte, params.SecBytes)
	if _, err = rand.Read(r.Self.Rho); err != nil {
		return nil, fmt.Errorf("refresh.round1.GenerateMessages(): sample Rho: %w", err)
	}

	// commit to data in message 2
	r.Self.Commitment, r.Decommitment, err = r.Hash.Commit(r.SelfID,
		r.Self.Rho, r.Self.VSSPolynomial, r.Self.SchnorrCommitments, r.Self.Public.Pedersen)
	if err != nil {
		return nil, fmt.Errorf("refresh.round1.GenerateMessages(): commit: %w", err)
	}

	return NewMessageRefresh1(r.SelfID, r.Self.Commitment), nil
}

// Next implements round.Round
func (r *round1) Next() round.Round {
	return &round2{r, nil}
}

func (r *round1) MessageContent() round.Content {
	return &round.First{}
}

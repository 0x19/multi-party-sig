syntax = "proto3";

package refresh;

option go_package = "github.com/taurusgroup/cmp-ecdsa/protocol/refresh";

option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "pkg/paillier/ciphertext.proto";
import "pkg/math/polynomial/exponent.proto";
import "pkg/zk/mod/mod.proto";
import "pkg/zk/prm/prm.proto";
import "pkg/pedersen/pedersen.proto";
import "pkg/round/message.proto";

message Message {
  round.Header Header = 1;
  oneof Content {
    Refresh1 refresh1 = 2;
    Refresh2 refresh2 = 3;
    Refresh3 refresh3 = 4;
    Refresh4 refresh4 = 5;
  };
}

message Refresh1 {
  option (gogoproto.goproto_getters) = false;
  // Commitment = Vᵢ = H(ρᵢ, Fᵢ(X), {Aᵢₗ}, Nᵢ, sᵢ, tᵢ, uᵢ)
  bytes Commitment = 1;
}

message Refresh2 {
  option (gogoproto.goproto_getters) = false;
  // HashEcho = H(V₁, ..., Vₙ)
  // This is essentially an echo of all messages from Refresh1.
  // If one party received something different then everybody must abort.
  bytes HashEcho = 1;
}

message Refresh3 {
  option (gogoproto.goproto_getters) = false;
  // Rho = ρᵢ
  bytes Rho = 1;
  // VSSPolynomial = Fᵢ(X) VSSPolynomial
  polynomial.Exponent VSSPolynomial = 2;
  // VSSSchnorrCommitments = {Aᵢₗ}ₗ Schnorr commitments for the coefficients of Fᵢ(X)
  repeated bytes VSSSchnorrCommitments = 3 [(gogoproto.customtype) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Point", (gogoproto.nullable) = false];
  // N Paillier and Pedersen
  pedersen.Parameters Pedersen = 4;
  // Decommitment = uᵢ decommitment bytes
  bytes Decommitment = 5;
}

message Refresh4 {
  option (gogoproto.goproto_getters) = false;
  zkmod.Proof Mod = 1;
  zkprm.Proof Prm = 2;
  // Share = Encᵢ(x) is the encryption of the receivers share
  paillier.Ciphertext Share = 3;
  // VSSSchnorrResponse are the Schnorr proofs of knowledge of the coefficients of the VSS polynomial
  repeated bytes VSSSchnorrResponse = 4 [(gogoproto.customtype) = "github.com/taurusgroup/cmp-ecdsa/pkg/math/curve.Scalar", (gogoproto.nullable) = false];
}